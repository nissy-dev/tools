JsModule {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        TsTypeAliasDeclaration {
            type_token: TYPE_KW@0..5 "type" [] [Whitespace(" ")],
            binding_identifier: TsIdentifierBinding {
                name_token: IDENT@5..7 "A" [] [Whitespace(" ")],
            },
            type_parameters: missing (optional),
            eq_token: EQ@7..9 "=" [] [Whitespace(" ")],
            ty: TsNumberType {
                number_token: NUMBER_KW@9..15 "number" [] [],
            },
            semicolon_token: SEMICOLON@15..16 ";" [] [],
        },
        TsTypeAliasDeclaration {
            type_token: TYPE_KW@16..22 "type" [Newline("\n")] [Whitespace(" ")],
            binding_identifier: TsIdentifierBinding {
                name_token: IDENT@22..24 "B" [] [Whitespace(" ")],
            },
            type_parameters: missing (optional),
            eq_token: EQ@24..26 "=" [] [Whitespace(" ")],
            ty: TsConditionalType {
                check_type: TsStringType {
                    string_token: STRING_KW@26..33 "string" [] [Whitespace(" ")],
                },
                extends_token: EXTENDS_KW@33..41 "extends" [] [Whitespace(" ")],
                extends_type: TsNumberType {
                    number_token: NUMBER_KW@41..48 "number" [] [Whitespace(" ")],
                },
                question_mark_token: QUESTION@48..50 "?" [] [Whitespace(" ")],
                true_type: TsStringType {
                    string_token: STRING_KW@50..57 "string" [] [Whitespace(" ")],
                },
                colon_token: COLON@57..59 ":" [] [Whitespace(" ")],
                false_type: TsNumberType {
                    number_token: NUMBER_KW@59..65 "number" [] [],
                },
            },
            semicolon_token: SEMICOLON@65..66 ";" [] [],
        },
        TsTypeAliasDeclaration {
            type_token: TYPE_KW@66..72 "type" [Newline("\n")] [Whitespace(" ")],
            binding_identifier: TsIdentifierBinding {
                name_token: IDENT@72..74 "C" [] [Whitespace(" ")],
            },
            type_parameters: missing (optional),
            eq_token: EQ@74..76 "=" [] [Whitespace(" ")],
            ty: TsConditionalType {
                check_type: TsReferenceType {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@76..78 "A" [] [Whitespace(" ")],
                    },
                    type_arguments: missing (optional),
                },
                extends_token: EXTENDS_KW@78..86 "extends" [] [Whitespace(" ")],
                extends_type: TsParenthesizedType {
                    l_paren_token: L_PAREN@86..87 "(" [] [],
                    ty: TsConditionalType {
                        check_type: TsReferenceType {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@87..89 "B" [] [Whitespace(" ")],
                            },
                            type_arguments: missing (optional),
                        },
                        extends_token: EXTENDS_KW@89..97 "extends" [] [Whitespace(" ")],
                        extends_type: TsReferenceType {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@97..99 "A" [] [Whitespace(" ")],
                            },
                            type_arguments: missing (optional),
                        },
                        question_mark_token: QUESTION@99..101 "?" [] [Whitespace(" ")],
                        true_type: TsNumberType {
                            number_token: NUMBER_KW@101..108 "number" [] [Whitespace(" ")],
                        },
                        colon_token: COLON@108..110 ":" [] [Whitespace(" ")],
                        false_type: TsStringType {
                            string_token: STRING_KW@110..116 "string" [] [],
                        },
                    },
                    r_paren_token: R_PAREN@116..118 ")" [] [Whitespace(" ")],
                },
                question_mark_token: QUESTION@118..120 "?" [] [Whitespace(" ")],
                true_type: TsVoidType {
                    void_token: VOID_KW@120..125 "void" [] [Whitespace(" ")],
                },
                colon_token: COLON@125..127 ":" [] [Whitespace(" ")],
                false_type: TsNumberType {
                    number_token: NUMBER_KW@127..133 "number" [] [],
                },
            },
            semicolon_token: SEMICOLON@133..134 ";" [] [],
        },
        TsTypeAliasDeclaration {
            type_token: TYPE_KW@134..140 "type" [Newline("\n")] [Whitespace(" ")],
            binding_identifier: TsIdentifierBinding {
                name_token: IDENT@140..141 "D" [] [],
            },
            type_parameters: TsTypeParameters {
                l_angle_token: L_ANGLE@141..142 "<" [] [],
                items: TsTypeParameterList [
                    TsTypeParameter {
                        name: TsTypeParameterName {
                            ident_token: IDENT@142..143 "T" [] [],
                        },
                        constraint: missing (optional),
                        default: missing (optional),
                    },
                ],
                r_angle_token: R_ANGLE@143..145 ">" [] [Whitespace(" ")],
            },
            eq_token: EQ@145..147 "=" [] [Whitespace(" ")],
            ty: TsConditionalType {
                check_type: TsReferenceType {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@147..149 "T" [] [Whitespace(" ")],
                    },
                    type_arguments: missing (optional),
                },
                extends_token: EXTENDS_KW@149..157 "extends" [] [Whitespace(" ")],
                extends_type: TsTupleType {
                    l_brack_token: L_BRACK@157..158 "[" [] [],
                    elements: TsTupleTypeElementList [
                        TsInferType {
                            infer_token: INFER_KW@158..164 "infer" [] [Whitespace(" ")],
                            name: TsTypeParameterName {
                                ident_token: IDENT@164..166 "S" [] [Whitespace(" ")],
                            },
                            constraint: TsTypeConstraintClause {
                                extends_token: EXTENDS_KW@166..174 "extends" [] [Whitespace(" ")],
                                ty: TsStringType {
                                    string_token: STRING_KW@174..180 "string" [] [],
                                },
                            },
                        },
                        COMMA@180..182 "," [] [Whitespace(" ")],
                        TsRestTupleTypeElement {
                            dotdotdot_token: DOT3@182..185 "..." [] [],
                            ty: TsArrayType {
                                element_type: TsUnknownType {
                                    unknown_token: UNKNOWN_KW@185..192 "unknown" [] [],
                                },
                                l_brack_token: L_BRACK@192..193 "[" [] [],
                                r_brack_token: R_BRACK@193..194 "]" [] [],
                            },
                        },
                    ],
                    r_brack_token: R_BRACK@194..196 "]" [] [Whitespace(" ")],
                },
                question_mark_token: QUESTION@196..198 "?" [] [Whitespace(" ")],
                true_type: TsReferenceType {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@198..200 "S" [] [Whitespace(" ")],
                    },
                    type_arguments: missing (optional),
                },
                colon_token: COLON@200..202 ":" [] [Whitespace(" ")],
                false_type: TsNeverType {
                    never_token: NEVER_KW@202..207 "never" [] [],
                },
            },
            semicolon_token: SEMICOLON@207..208 ";" [] [],
        },
        TsTypeAliasDeclaration {
            type_token: TYPE_KW@208..214 "type" [Newline("\n")] [Whitespace(" ")],
            binding_identifier: TsIdentifierBinding {
                name_token: IDENT@214..215 "E" [] [],
            },
            type_parameters: TsTypeParameters {
                l_angle_token: L_ANGLE@215..216 "<" [] [],
                items: TsTypeParameterList [
                    TsTypeParameter {
                        name: TsTypeParameterName {
                            ident_token: IDENT@216..217 "U" [] [],
                        },
                        constraint: missing (optional),
                        default: missing (optional),
                    },
                    COMMA@217..219 "," [] [Whitespace(" ")],
                    TsTypeParameter {
                        name: TsTypeParameterName {
                            ident_token: IDENT@219..220 "T" [] [],
                        },
                        constraint: missing (optional),
                        default: missing (optional),
                    },
                ],
                r_angle_token: R_ANGLE@220..222 ">" [] [Whitespace(" ")],
            },
            eq_token: EQ@222..224 "=" [] [Whitespace(" ")],
            ty: TsConditionalType {
                check_type: TsReferenceType {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@224..226 "T" [] [Whitespace(" ")],
                    },
                    type_arguments: missing (optional),
                },
                extends_token: EXTENDS_KW@226..234 "extends" [] [Whitespace(" ")],
                extends_type: TsParenthesizedType {
                    l_paren_token: L_PAREN@234..235 "(" [] [],
                    ty: TsConditionalType {
                        check_type: TsInferType {
                            infer_token: INFER_KW@235..241 "infer" [] [Whitespace(" ")],
                            name: TsTypeParameterName {
                                ident_token: IDENT@241..243 "U" [] [Whitespace(" ")],
                            },
                            constraint: missing (optional),
                        },
                        extends_token: EXTENDS_KW@243..251 "extends" [] [Whitespace(" ")],
                        extends_type: TsNumberType {
                            number_token: NUMBER_KW@251..258 "number" [] [Whitespace(" ")],
                        },
                        question_mark_token: QUESTION@258..260 "?" [] [Whitespace(" ")],
                        true_type: TsReferenceType {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@260..262 "U" [] [Whitespace(" ")],
                            },
                            type_arguments: missing (optional),
                        },
                        colon_token: COLON@262..264 ":" [] [Whitespace(" ")],
                        false_type: TsReferenceType {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@264..266 "T" [] [Whitespace(" ")],
                            },
                            type_arguments: missing (optional),
                        },
                    },
                    r_paren_token: R_PAREN@266..268 ")" [] [Whitespace(" ")],
                },
                question_mark_token: QUESTION@268..270 "?" [] [Whitespace(" ")],
                true_type: TsReferenceType {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@270..272 "U" [] [Whitespace(" ")],
                    },
                    type_arguments: missing (optional),
                },
                colon_token: COLON@272..274 ":" [] [Whitespace(" ")],
                false_type: TsReferenceType {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@274..275 "T" [] [],
                    },
                    type_arguments: missing (optional),
                },
            },
            semicolon_token: missing (optional),
        },
        TsTypeAliasDeclaration {
            type_token: TYPE_KW@275..281 "type" [Newline("\n")] [Whitespace(" ")],
            binding_identifier: TsIdentifierBinding {
                name_token: IDENT@281..282 "F" [] [],
            },
            type_parameters: TsTypeParameters {
                l_angle_token: L_ANGLE@282..283 "<" [] [],
                items: TsTypeParameterList [
                    TsTypeParameter {
                        name: TsTypeParameterName {
                            ident_token: IDENT@283..284 "T" [] [],
                        },
                        constraint: missing (optional),
                        default: missing (optional),
                    },
                ],
                r_angle_token: R_ANGLE@284..286 ">" [] [Whitespace(" ")],
            },
            eq_token: EQ@286..288 "=" [] [Whitespace(" ")],
            ty: TsConditionalType {
                check_type: TsReferenceType {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@288..290 "T" [] [Whitespace(" ")],
                    },
                    type_arguments: missing (optional),
                },
                extends_token: EXTENDS_KW@290..298 "extends" [] [Whitespace(" ")],
                extends_type: TsMappedType {
                    l_curly_token: L_CURLY@298..300 "{" [] [Whitespace(" ")],
                    readonly_modifier: missing (optional),
                    l_brack_token: L_BRACK@300..301 "[" [] [],
                    property_name: TsTypeParameterName {
                        ident_token: IDENT@301..303 "P" [] [Whitespace(" ")],
                    },
                    in_token: IN_KW@303..306 "in" [] [Whitespace(" ")],
                    keys_type: TsConditionalType {
                        check_type: TsInferType {
                            infer_token: INFER_KW@306..312 "infer" [] [Whitespace(" ")],
                            name: TsTypeParameterName {
                                ident_token: IDENT@312..314 "U" [] [Whitespace(" ")],
                            },
                            constraint: missing (optional),
                        },
                        extends_token: EXTENDS_KW@314..322 "extends" [] [Whitespace(" ")],
                        extends_type: TsTypeOperatorType {
                            operator_token: KEYOF_KW@322..328 "keyof" [] [Whitespace(" ")],
                            ty: TsReferenceType {
                                name: JsReferenceIdentifier {
                                    value_token: IDENT@328..330 "T" [] [Whitespace(" ")],
                                },
                                type_arguments: missing (optional),
                            },
                        },
                        question_mark_token: QUESTION@330..332 "?" [] [Whitespace(" ")],
                        true_type: TsNumberLiteralType {
                            minus_token: missing (optional),
                            literal_token: JS_NUMBER_LITERAL@332..334 "1" [] [Whitespace(" ")],
                        },
                        colon_token: COLON@334..336 ":" [] [Whitespace(" ")],
                        false_type: TsNumberLiteralType {
                            minus_token: missing (optional),
                            literal_token: JS_NUMBER_LITERAL@336..337 "0" [] [],
                        },
                    },
                    as_clause: missing (optional),
                    r_brack_token: R_BRACK@337..338 "]" [] [],
                    optional_modifier: missing (optional),
                    mapped_type: TsTypeAnnotation {
                        colon_token: COLON@338..340 ":" [] [Whitespace(" ")],
                        ty: TsNumberLiteralType {
                            minus_token: missing (optional),
                            literal_token: JS_NUMBER_LITERAL@340..341 "1" [] [],
                        },
                    },
                    semicolon_token: SEMICOLON@341..343 ";" [] [Whitespace(" ")],
                    r_curly_token: R_CURLY@343..345 "}" [] [Whitespace(" ")],
                },
                question_mark_token: QUESTION@345..347 "?" [] [Whitespace(" ")],
                true_type: TsNumberLiteralType {
                    minus_token: missing (optional),
                    literal_token: JS_NUMBER_LITERAL@347..349 "1" [] [Whitespace(" ")],
                },
                colon_token: COLON@349..351 ":" [] [Whitespace(" ")],
                false_type: TsNumberLiteralType {
                    minus_token: missing (optional),
                    literal_token: JS_NUMBER_LITERAL@351..352 "0" [] [],
                },
            },
            semicolon_token: SEMICOLON@352..353 ";" [] [],
        },
        TsTypeAliasDeclaration {
            type_token: TYPE_KW@353..359 "type" [Newline("\n")] [Whitespace(" ")],
            binding_identifier: TsIdentifierBinding {
                name_token: IDENT@359..360 "G" [] [],
            },
            type_parameters: TsTypeParameters {
                l_angle_token: L_ANGLE@360..361 "<" [] [],
                items: TsTypeParameterList [
                    TsTypeParameter {
                        name: TsTypeParameterName {
                            ident_token: IDENT@361..362 "T" [] [],
                        },
                        constraint: missing (optional),
                        default: missing (optional),
                    },
                ],
                r_angle_token: R_ANGLE@362..364 ">" [] [Whitespace(" ")],
            },
            eq_token: EQ@364..366 "=" [] [Whitespace(" ")],
            ty: TsConditionalType {
                check_type: TsReferenceType {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@366..368 "T" [] [Whitespace(" ")],
                    },
                    type_arguments: missing (optional),
                },
                extends_token: EXTENDS_KW@368..376 "extends" [] [Whitespace(" ")],
                extends_type: TsTupleType {
                    l_brack_token: L_BRACK@376..377 "[" [] [],
                    elements: TsTupleTypeElementList [
                        TsUnknownType {
                            unknown_token: UNKNOWN_KW@377..384 "unknown" [] [],
                        },
                        COMMA@384..386 "," [] [Whitespace(" ")],
                        TsInferType {
                            infer_token: INFER_KW@386..392 "infer" [] [Whitespace(" ")],
                            name: TsTypeParameterName {
                                ident_token: IDENT@392..394 "S" [] [Whitespace(" ")],
                            },
                            constraint: TsTypeConstraintClause {
                                extends_token: EXTENDS_KW@394..402 "extends" [] [Whitespace(" ")],
                                ty: TsStringType {
                                    string_token: STRING_KW@402..408 "string" [] [],
                                },
                            },
                        },
                    ],
                    r_brack_token: R_BRACK@408..410 "]" [] [Whitespace(" ")],
                },
                question_mark_token: QUESTION@410..412 "?" [] [Whitespace(" ")],
                true_type: TsReferenceType {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@412..414 "S" [] [Whitespace(" ")],
                    },
                    type_arguments: missing (optional),
                },
                colon_token: COLON@414..416 ":" [] [Whitespace(" ")],
                false_type: TsNeverType {
                    never_token: NEVER_KW@416..421 "never" [] [],
                },
            },
            semicolon_token: SEMICOLON@421..422 ";" [] [],
        },
        TsTypeAliasDeclaration {
            type_token: TYPE_KW@422..428 "type" [Newline("\n")] [Whitespace(" ")],
            binding_identifier: TsIdentifierBinding {
                name_token: IDENT@428..430 "H" [] [Whitespace(" ")],
            },
            type_parameters: missing (optional),
            eq_token: EQ@430..432 "=" [] [Whitespace(" ")],
            ty: TsConditionalType {
                check_type: TsReferenceType {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@432..434 "A" [] [Whitespace(" ")],
                    },
                    type_arguments: missing (optional),
                },
                extends_token: EXTENDS_KW@434..442 "extends" [] [Whitespace(" ")],
                extends_type: TsFunctionType {
                    type_parameters: missing (optional),
                    parameters: JsParameters {
                        l_paren_token: L_PAREN@442..443 "(" [] [],
                        items: JsParameterList [],
                        r_paren_token: R_PAREN@443..445 ")" [] [Whitespace(" ")],
                    },
                    fat_arrow_token: FAT_ARROW@445..448 "=>" [] [Whitespace(" ")],
                    return_type: TsConditionalType {
                        check_type: TsReferenceType {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@448..450 "B" [] [Whitespace(" ")],
                            },
                            type_arguments: missing (optional),
                        },
                        extends_token: EXTENDS_KW@450..458 "extends" [] [Whitespace(" ")],
                        extends_type: TsReferenceType {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@458..460 "C" [] [Whitespace(" ")],
                            },
                            type_arguments: missing (optional),
                        },
                        question_mark_token: QUESTION@460..462 "?" [] [Whitespace(" ")],
                        true_type: TsReferenceType {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@462..464 "D" [] [Whitespace(" ")],
                            },
                            type_arguments: missing (optional),
                        },
                        colon_token: COLON@464..466 ":" [] [Whitespace(" ")],
                        false_type: TsReferenceType {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@466..468 "E" [] [Whitespace(" ")],
                            },
                            type_arguments: missing (optional),
                        },
                    },
                },
                question_mark_token: QUESTION@468..470 "?" [] [Whitespace(" ")],
                true_type: TsReferenceType {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@470..472 "F" [] [Whitespace(" ")],
                    },
                    type_arguments: missing (optional),
                },
                colon_token: COLON@472..474 ":" [] [Whitespace(" ")],
                false_type: TsReferenceType {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@474..475 "G" [] [],
                    },
                    type_arguments: missing (optional),
                },
            },
            semicolon_token: SEMICOLON@475..476 ";" [] [],
        },
        TsTypeAliasDeclaration {
            type_token: TYPE_KW@476..482 "type" [Newline("\n")] [Whitespace(" ")],
            binding_identifier: TsIdentifierBinding {
                name_token: IDENT@482..483 "I" [] [],
            },
            type_parameters: TsTypeParameters {
                l_angle_token: L_ANGLE@483..484 "<" [] [],
                items: TsTypeParameterList [
                    TsTypeParameter {
                        name: TsTypeParameterName {
                            ident_token: IDENT@484..485 "A" [] [],
                        },
                        constraint: missing (optional),
                        default: missing (optional),
                    },
                    COMMA@485..487 "," [] [Whitespace(" ")],
                    TsTypeParameter {
                        name: TsTypeParameterName {
                            ident_token: IDENT@487..488 "B" [] [],
                        },
                        constraint: missing (optional),
                        default: missing (optional),
                    },
                    COMMA@488..490 "," [] [Whitespace(" ")],
                    TsTypeParameter {
                        name: TsTypeParameterName {
                            ident_token: IDENT@490..491 "C" [] [],
                        },
                        constraint: missing (optional),
                        default: missing (optional),
                    },
                    COMMA@491..493 "," [] [Whitespace(" ")],
                    TsTypeParameter {
                        name: TsTypeParameterName {
                            ident_token: IDENT@493..494 "D" [] [],
                        },
                        constraint: missing (optional),
                        default: missing (optional),
                    },
                    COMMA@494..496 "," [] [Whitespace(" ")],
                    TsTypeParameter {
                        name: TsTypeParameterName {
                            ident_token: IDENT@496..497 "E" [] [],
                        },
                        constraint: missing (optional),
                        default: missing (optional),
                    },
                    COMMA@497..499 "," [] [Whitespace(" ")],
                    TsTypeParameter {
                        name: TsTypeParameterName {
                            ident_token: IDENT@499..500 "F" [] [],
                        },
                        constraint: missing (optional),
                        default: missing (optional),
                    },
                    COMMA@500..502 "," [] [Whitespace(" ")],
                    TsTypeParameter {
                        name: TsTypeParameterName {
                            ident_token: IDENT@502..503 "G" [] [],
                        },
                        constraint: missing (optional),
                        default: missing (optional),
                    },
                ],
                r_angle_token: R_ANGLE@503..505 ">" [] [Whitespace(" ")],
            },
            eq_token: EQ@505..507 "=" [] [Whitespace(" ")],
            ty: TsConditionalType {
                check_type: TsReferenceType {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@507..509 "A" [] [Whitespace(" ")],
                    },
                    type_arguments: missing (optional),
                },
                extends_token: EXTENDS_KW@509..517 "extends" [] [Whitespace(" ")],
                extends_type: TsFunctionType {
                    type_parameters: missing (optional),
                    parameters: JsParameters {
                        l_paren_token: L_PAREN@517..518 "(" [] [],
                        items: JsParameterList [
                            JsFormalParameter {
                                binding: JsIdentifierBinding {
                                    name_token: IDENT@518..519 "x" [] [],
                                },
                                question_mark_token: missing (optional),
                                type_annotation: TsTypeAnnotation {
                                    colon_token: COLON@519..521 ":" [] [Whitespace(" ")],
                                    ty: TsConditionalType {
                                        check_type: TsReferenceType {
                                            name: JsReferenceIdentifier {
                                                value_token: IDENT@521..523 "B" [] [Whitespace(" ")],
                                            },
                                            type_arguments: missing (optional),
                                        },
                                        extends_token: EXTENDS_KW@523..531 "extends" [] [Whitespace(" ")],
                                        extends_type: TsReferenceType {
                                            name: JsReferenceIdentifier {
                                                value_token: IDENT@531..533 "C" [] [Whitespace(" ")],
                                            },
                                            type_arguments: missing (optional),
                                        },
                                        question_mark_token: QUESTION@533..535 "?" [] [Whitespace(" ")],
                                        true_type: TsReferenceType {
                                            name: JsReferenceIdentifier {
                                                value_token: IDENT@535..537 "D" [] [Whitespace(" ")],
                                            },
                                            type_arguments: missing (optional),
                                        },
                                        colon_token: COLON@537..539 ":" [] [Whitespace(" ")],
                                        false_type: TsReferenceType {
                                            name: JsReferenceIdentifier {
                                                value_token: IDENT@539..540 "E" [] [],
                                            },
                                            type_arguments: missing (optional),
                                        },
                                    },
                                },
                                initializer: missing (optional),
                            },
                        ],
                        r_paren_token: R_PAREN@540..542 ")" [] [Whitespace(" ")],
                    },
                    fat_arrow_token: FAT_ARROW@542..545 "=>" [] [Whitespace(" ")],
                    return_type: TsNumberLiteralType {
                        minus_token: missing (optional),
                        literal_token: JS_NUMBER_LITERAL@545..547 "0" [] [Whitespace(" ")],
                    },
                },
                question_mark_token: QUESTION@547..549 "?" [] [Whitespace(" ")],
                true_type: TsReferenceType {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@549..551 "F" [] [Whitespace(" ")],
                    },
                    type_arguments: missing (optional),
                },
                colon_token: COLON@551..553 ":" [] [Whitespace(" ")],
                false_type: TsReferenceType {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@553..554 "G" [] [],
                    },
                    type_arguments: missing (optional),
                },
            },
            semicolon_token: SEMICOLON@554..555 ";" [] [],
        },
        TsTypeAliasDeclaration {
            type_token: TYPE_KW@555..561 "type" [Newline("\n")] [Whitespace(" ")],
            binding_identifier: TsIdentifierBinding {
                name_token: IDENT@561..562 "J" [] [],
            },
            type_parameters: TsTypeParameters {
                l_angle_token: L_ANGLE@562..563 "<" [] [],
                items: TsTypeParameterList [
                    TsTypeParameter {
                        name: TsTypeParameterName {
                            ident_token: IDENT@563..564 "T" [] [],
                        },
                        constraint: missing (optional),
                        default: missing (optional),
                    },
                ],
                r_angle_token: R_ANGLE@564..566 ">" [] [Whitespace(" ")],
            },
            eq_token: EQ@566..568 "=" [] [Whitespace(" ")],
            ty: TsConditionalType {
                check_type: TsReferenceType {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@568..570 "T" [] [Whitespace(" ")],
                    },
                    type_arguments: missing (optional),
                },
                extends_token: EXTENDS_KW@570..578 "extends" [] [Whitespace(" ")],
                extends_type: TsParenthesizedType {
                    l_paren_token: L_PAREN@578..579 "(" [] [],
                    ty: TsFunctionType {
                        type_parameters: missing (optional),
                        parameters: JsParameters {
                            l_paren_token: L_PAREN@579..580 "(" [] [],
                            items: JsParameterList [
                                JsRestParameter {
                                    dotdotdot_token: DOT3@580..583 "..." [] [],
                                    binding: JsIdentifierBinding {
                                        name_token: IDENT@583..584 "a" [] [],
                                    },
                                    type_annotation: TsTypeAnnotation {
                                        colon_token: COLON@584..586 ":" [] [Whitespace(" ")],
                                        ty: TsArrayType {
                                            element_type: TsAnyType {
                                                any_token: ANY_KW@586..589 "any" [] [],
                                            },
                                            l_brack_token: L_BRACK@589..590 "[" [] [],
                                            r_brack_token: R_BRACK@590..591 "]" [] [],
                                        },
                                    },
                                },
                            ],
                            r_paren_token: R_PAREN@591..593 ")" [] [Whitespace(" ")],
                        },
                        fat_arrow_token: FAT_ARROW@593..596 "=>" [] [Whitespace(" ")],
                        return_type: TsInferType {
                            infer_token: INFER_KW@596..602 "infer" [] [Whitespace(" ")],
                            name: TsTypeParameterName {
                                ident_token: IDENT@602..604 "R" [] [Whitespace(" ")],
                            },
                            constraint: TsTypeConstraintClause {
                                extends_token: EXTENDS_KW@604..612 "extends" [] [Whitespace(" ")],
                                ty: TsStringType {
                                    string_token: STRING_KW@612..618 "string" [] [],
                                },
                            },
                        },
                    },
                    r_paren_token: R_PAREN@618..620 ")" [] [Whitespace(" ")],
                },
                question_mark_token: QUESTION@620..622 "?" [] [Whitespace(" ")],
                true_type: TsReferenceType {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@622..624 "R" [] [Whitespace(" ")],
                    },
                    type_arguments: missing (optional),
                },
                colon_token: COLON@624..626 ":" [] [Whitespace(" ")],
                false_type: TsNeverType {
                    never_token: NEVER_KW@626..631 "never" [] [],
                },
            },
            semicolon_token: SEMICOLON@631..632 ";" [] [],
        },
    ],
    eof_token: EOF@632..633 "" [Newline("\n")] [],
}

0: JS_MODULE@0..633
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_MODULE_ITEM_LIST@0..632
    0: TS_TYPE_ALIAS_DECLARATION@0..16
      0: TYPE_KW@0..5 "type" [] [Whitespace(" ")]
      1: TS_IDENTIFIER_BINDING@5..7
        0: IDENT@5..7 "A" [] [Whitespace(" ")]
      2: (empty)
      3: EQ@7..9 "=" [] [Whitespace(" ")]
      4: TS_NUMBER_TYPE@9..15
        0: NUMBER_KW@9..15 "number" [] []
      5: SEMICOLON@15..16 ";" [] []
    1: TS_TYPE_ALIAS_DECLARATION@16..66
      0: TYPE_KW@16..22 "type" [Newline("\n")] [Whitespace(" ")]
      1: TS_IDENTIFIER_BINDING@22..24
        0: IDENT@22..24 "B" [] [Whitespace(" ")]
      2: (empty)
      3: EQ@24..26 "=" [] [Whitespace(" ")]
      4: TS_CONDITIONAL_TYPE@26..65
        0: TS_STRING_TYPE@26..33
          0: STRING_KW@26..33 "string" [] [Whitespace(" ")]
        1: EXTENDS_KW@33..41 "extends" [] [Whitespace(" ")]
        2: TS_NUMBER_TYPE@41..48
          0: NUMBER_KW@41..48 "number" [] [Whitespace(" ")]
        3: QUESTION@48..50 "?" [] [Whitespace(" ")]
        4: TS_STRING_TYPE@50..57
          0: STRING_KW@50..57 "string" [] [Whitespace(" ")]
        5: COLON@57..59 ":" [] [Whitespace(" ")]
        6: TS_NUMBER_TYPE@59..65
          0: NUMBER_KW@59..65 "number" [] []
      5: SEMICOLON@65..66 ";" [] []
    2: TS_TYPE_ALIAS_DECLARATION@66..134
      0: TYPE_KW@66..72 "type" [Newline("\n")] [Whitespace(" ")]
      1: TS_IDENTIFIER_BINDING@72..74
        0: IDENT@72..74 "C" [] [Whitespace(" ")]
      2: (empty)
      3: EQ@74..76 "=" [] [Whitespace(" ")]
      4: TS_CONDITIONAL_TYPE@76..133
        0: TS_REFERENCE_TYPE@76..78
          0: JS_REFERENCE_IDENTIFIER@76..78
            0: IDENT@76..78 "A" [] [Whitespace(" ")]
          1: (empty)
        1: EXTENDS_KW@78..86 "extends" [] [Whitespace(" ")]
        2: TS_PARENTHESIZED_TYPE@86..118
          0: L_PAREN@86..87 "(" [] []
          1: TS_CONDITIONAL_TYPE@87..116
            0: TS_REFERENCE_TYPE@87..89
              0: JS_REFERENCE_IDENTIFIER@87..89
                0: IDENT@87..89 "B" [] [Whitespace(" ")]
              1: (empty)
            1: EXTENDS_KW@89..97 "extends" [] [Whitespace(" ")]
            2: TS_REFERENCE_TYPE@97..99
              0: JS_REFERENCE_IDENTIFIER@97..99
                0: IDENT@97..99 "A" [] [Whitespace(" ")]
              1: (empty)
            3: QUESTION@99..101 "?" [] [Whitespace(" ")]
            4: TS_NUMBER_TYPE@101..108
              0: NUMBER_KW@101..108 "number" [] [Whitespace(" ")]
            5: COLON@108..110 ":" [] [Whitespace(" ")]
            6: TS_STRING_TYPE@110..116
              0: STRING_KW@110..116 "string" [] []
          2: R_PAREN@116..118 ")" [] [Whitespace(" ")]
        3: QUESTION@118..120 "?" [] [Whitespace(" ")]
        4: TS_VOID_TYPE@120..125
          0: VOID_KW@120..125 "void" [] [Whitespace(" ")]
        5: COLON@125..127 ":" [] [Whitespace(" ")]
        6: TS_NUMBER_TYPE@127..133
          0: NUMBER_KW@127..133 "number" [] []
      5: SEMICOLON@133..134 ";" [] []
    3: TS_TYPE_ALIAS_DECLARATION@134..208
      0: TYPE_KW@134..140 "type" [Newline("\n")] [Whitespace(" ")]
      1: TS_IDENTIFIER_BINDING@140..141
        0: IDENT@140..141 "D" [] []
      2: TS_TYPE_PARAMETERS@141..145
        0: L_ANGLE@141..142 "<" [] []
        1: TS_TYPE_PARAMETER_LIST@142..143
          0: TS_TYPE_PARAMETER@142..143
            0: TS_TYPE_PARAMETER_NAME@142..143
              0: IDENT@142..143 "T" [] []
            1: (empty)
            2: (empty)
        2: R_ANGLE@143..145 ">" [] [Whitespace(" ")]
      3: EQ@145..147 "=" [] [Whitespace(" ")]
      4: TS_CONDITIONAL_TYPE@147..207
        0: TS_REFERENCE_TYPE@147..149
          0: JS_REFERENCE_IDENTIFIER@147..149
            0: IDENT@147..149 "T" [] [Whitespace(" ")]
          1: (empty)
        1: EXTENDS_KW@149..157 "extends" [] [Whitespace(" ")]
        2: TS_TUPLE_TYPE@157..196
          0: L_BRACK@157..158 "[" [] []
          1: TS_TUPLE_TYPE_ELEMENT_LIST@158..194
            0: TS_INFER_TYPE@158..180
              0: INFER_KW@158..164 "infer" [] [Whitespace(" ")]
              1: TS_TYPE_PARAMETER_NAME@164..166
                0: IDENT@164..166 "S" [] [Whitespace(" ")]
              2: TS_TYPE_CONSTRAINT_CLAUSE@166..180
                0: EXTENDS_KW@166..174 "extends" [] [Whitespace(" ")]
                1: TS_STRING_TYPE@174..180
                  0: STRING_KW@174..180 "string" [] []
            1: COMMA@180..182 "," [] [Whitespace(" ")]
            2: TS_REST_TUPLE_TYPE_ELEMENT@182..194
              0: DOT3@182..185 "..." [] []
              1: TS_ARRAY_TYPE@185..194
                0: TS_UNKNOWN_TYPE@185..192
                  0: UNKNOWN_KW@185..192 "unknown" [] []
                1: L_BRACK@192..193 "[" [] []
                2: R_BRACK@193..194 "]" [] []
          2: R_BRACK@194..196 "]" [] [Whitespace(" ")]
        3: QUESTION@196..198 "?" [] [Whitespace(" ")]
        4: TS_REFERENCE_TYPE@198..200
          0: JS_REFERENCE_IDENTIFIER@198..200
            0: IDENT@198..200 "S" [] [Whitespace(" ")]
          1: (empty)
        5: COLON@200..202 ":" [] [Whitespace(" ")]
        6: TS_NEVER_TYPE@202..207
          0: NEVER_KW@202..207 "never" [] []
      5: SEMICOLON@207..208 ";" [] []
    4: TS_TYPE_ALIAS_DECLARATION@208..275
      0: TYPE_KW@208..214 "type" [Newline("\n")] [Whitespace(" ")]
      1: TS_IDENTIFIER_BINDING@214..215
        0: IDENT@214..215 "E" [] []
      2: TS_TYPE_PARAMETERS@215..222
        0: L_ANGLE@215..216 "<" [] []
        1: TS_TYPE_PARAMETER_LIST@216..220
          0: TS_TYPE_PARAMETER@216..217
            0: TS_TYPE_PARAMETER_NAME@216..217
              0: IDENT@216..217 "U" [] []
            1: (empty)
            2: (empty)
          1: COMMA@217..219 "," [] [Whitespace(" ")]
          2: TS_TYPE_PARAMETER@219..220
            0: TS_TYPE_PARAMETER_NAME@219..220
              0: IDENT@219..220 "T" [] []
            1: (empty)
            2: (empty)
        2: R_ANGLE@220..222 ">" [] [Whitespace(" ")]
      3: EQ@222..224 "=" [] [Whitespace(" ")]
      4: TS_CONDITIONAL_TYPE@224..275
        0: TS_REFERENCE_TYPE@224..226
          0: JS_REFERENCE_IDENTIFIER@224..226
            0: IDENT@224..226 "T" [] [Whitespace(" ")]
          1: (empty)
        1: EXTENDS_KW@226..234 "extends" [] [Whitespace(" ")]
        2: TS_PARENTHESIZED_TYPE@234..268
          0: L_PAREN@234..235 "(" [] []
          1: TS_CONDITIONAL_TYPE@235..266
            0: TS_INFER_TYPE@235..243
              0: INFER_KW@235..241 "infer" [] [Whitespace(" ")]
              1: TS_TYPE_PARAMETER_NAME@241..243
                0: IDENT@241..243 "U" [] [Whitespace(" ")]
              2: (empty)
            1: EXTENDS_KW@243..251 "extends" [] [Whitespace(" ")]
            2: TS_NUMBER_TYPE@251..258
              0: NUMBER_KW@251..258 "number" [] [Whitespace(" ")]
            3: QUESTION@258..260 "?" [] [Whitespace(" ")]
            4: TS_REFERENCE_TYPE@260..262
              0: JS_REFERENCE_IDENTIFIER@260..262
                0: IDENT@260..262 "U" [] [Whitespace(" ")]
              1: (empty)
            5: COLON@262..264 ":" [] [Whitespace(" ")]
            6: TS_REFERENCE_TYPE@264..266
              0: JS_REFERENCE_IDENTIFIER@264..266
                0: IDENT@264..266 "T" [] [Whitespace(" ")]
              1: (empty)
          2: R_PAREN@266..268 ")" [] [Whitespace(" ")]
        3: QUESTION@268..270 "?" [] [Whitespace(" ")]
        4: TS_REFERENCE_TYPE@270..272
          0: JS_REFERENCE_IDENTIFIER@270..272
            0: IDENT@270..272 "U" [] [Whitespace(" ")]
          1: (empty)
        5: COLON@272..274 ":" [] [Whitespace(" ")]
        6: TS_REFERENCE_TYPE@274..275
          0: JS_REFERENCE_IDENTIFIER@274..275
            0: IDENT@274..275 "T" [] []
          1: (empty)
      5: (empty)
    5: TS_TYPE_ALIAS_DECLARATION@275..353
      0: TYPE_KW@275..281 "type" [Newline("\n")] [Whitespace(" ")]
      1: TS_IDENTIFIER_BINDING@281..282
        0: IDENT@281..282 "F" [] []
      2: TS_TYPE_PARAMETERS@282..286
        0: L_ANGLE@282..283 "<" [] []
        1: TS_TYPE_PARAMETER_LIST@283..284
          0: TS_TYPE_PARAMETER@283..284
            0: TS_TYPE_PARAMETER_NAME@283..284
              0: IDENT@283..284 "T" [] []
            1: (empty)
            2: (empty)
        2: R_ANGLE@284..286 ">" [] [Whitespace(" ")]
      3: EQ@286..288 "=" [] [Whitespace(" ")]
      4: TS_CONDITIONAL_TYPE@288..352
        0: TS_REFERENCE_TYPE@288..290
          0: JS_REFERENCE_IDENTIFIER@288..290
            0: IDENT@288..290 "T" [] [Whitespace(" ")]
          1: (empty)
        1: EXTENDS_KW@290..298 "extends" [] [Whitespace(" ")]
        2: TS_MAPPED_TYPE@298..345
          0: L_CURLY@298..300 "{" [] [Whitespace(" ")]
          1: (empty)
          2: L_BRACK@300..301 "[" [] []
          3: TS_TYPE_PARAMETER_NAME@301..303
            0: IDENT@301..303 "P" [] [Whitespace(" ")]
          4: IN_KW@303..306 "in" [] [Whitespace(" ")]
          5: TS_CONDITIONAL_TYPE@306..337
            0: TS_INFER_TYPE@306..314
              0: INFER_KW@306..312 "infer" [] [Whitespace(" ")]
              1: TS_TYPE_PARAMETER_NAME@312..314
                0: IDENT@312..314 "U" [] [Whitespace(" ")]
              2: (empty)
            1: EXTENDS_KW@314..322 "extends" [] [Whitespace(" ")]
            2: TS_TYPE_OPERATOR_TYPE@322..330
              0: KEYOF_KW@322..328 "keyof" [] [Whitespace(" ")]
              1: TS_REFERENCE_TYPE@328..330
                0: JS_REFERENCE_IDENTIFIER@328..330
                  0: IDENT@328..330 "T" [] [Whitespace(" ")]
                1: (empty)
            3: QUESTION@330..332 "?" [] [Whitespace(" ")]
            4: TS_NUMBER_LITERAL_TYPE@332..334
              0: (empty)
              1: JS_NUMBER_LITERAL@332..334 "1" [] [Whitespace(" ")]
            5: COLON@334..336 ":" [] [Whitespace(" ")]
            6: TS_NUMBER_LITERAL_TYPE@336..337
              0: (empty)
              1: JS_NUMBER_LITERAL@336..337 "0" [] []
          6: (empty)
          7: R_BRACK@337..338 "]" [] []
          8: (empty)
          9: TS_TYPE_ANNOTATION@338..341
            0: COLON@338..340 ":" [] [Whitespace(" ")]
            1: TS_NUMBER_LITERAL_TYPE@340..341
              0: (empty)
              1: JS_NUMBER_LITERAL@340..341 "1" [] []
          10: SEMICOLON@341..343 ";" [] [Whitespace(" ")]
          11: R_CURLY@343..345 "}" [] [Whitespace(" ")]
        3: QUESTION@345..347 "?" [] [Whitespace(" ")]
        4: TS_NUMBER_LITERAL_TYPE@347..349
          0: (empty)
          1: JS_NUMBER_LITERAL@347..349 "1" [] [Whitespace(" ")]
        5: COLON@349..351 ":" [] [Whitespace(" ")]
        6: TS_NUMBER_LITERAL_TYPE@351..352
          0: (empty)
          1: JS_NUMBER_LITERAL@351..352 "0" [] []
      5: SEMICOLON@352..353 ";" [] []
    6: TS_TYPE_ALIAS_DECLARATION@353..422
      0: TYPE_KW@353..359 "type" [Newline("\n")] [Whitespace(" ")]
      1: TS_IDENTIFIER_BINDING@359..360
        0: IDENT@359..360 "G" [] []
      2: TS_TYPE_PARAMETERS@360..364
        0: L_ANGLE@360..361 "<" [] []
        1: TS_TYPE_PARAMETER_LIST@361..362
          0: TS_TYPE_PARAMETER@361..362
            0: TS_TYPE_PARAMETER_NAME@361..362
              0: IDENT@361..362 "T" [] []
            1: (empty)
            2: (empty)
        2: R_ANGLE@362..364 ">" [] [Whitespace(" ")]
      3: EQ@364..366 "=" [] [Whitespace(" ")]
      4: TS_CONDITIONAL_TYPE@366..421
        0: TS_REFERENCE_TYPE@366..368
          0: JS_REFERENCE_IDENTIFIER@366..368
            0: IDENT@366..368 "T" [] [Whitespace(" ")]
          1: (empty)
        1: EXTENDS_KW@368..376 "extends" [] [Whitespace(" ")]
        2: TS_TUPLE_TYPE@376..410
          0: L_BRACK@376..377 "[" [] []
          1: TS_TUPLE_TYPE_ELEMENT_LIST@377..408
            0: TS_UNKNOWN_TYPE@377..384
              0: UNKNOWN_KW@377..384 "unknown" [] []
            1: COMMA@384..386 "," [] [Whitespace(" ")]
            2: TS_INFER_TYPE@386..408
              0: INFER_KW@386..392 "infer" [] [Whitespace(" ")]
              1: TS_TYPE_PARAMETER_NAME@392..394
                0: IDENT@392..394 "S" [] [Whitespace(" ")]
              2: TS_TYPE_CONSTRAINT_CLAUSE@394..408
                0: EXTENDS_KW@394..402 "extends" [] [Whitespace(" ")]
                1: TS_STRING_TYPE@402..408
                  0: STRING_KW@402..408 "string" [] []
          2: R_BRACK@408..410 "]" [] [Whitespace(" ")]
        3: QUESTION@410..412 "?" [] [Whitespace(" ")]
        4: TS_REFERENCE_TYPE@412..414
          0: JS_REFERENCE_IDENTIFIER@412..414
            0: IDENT@412..414 "S" [] [Whitespace(" ")]
          1: (empty)
        5: COLON@414..416 ":" [] [Whitespace(" ")]
        6: TS_NEVER_TYPE@416..421
          0: NEVER_KW@416..421 "never" [] []
      5: SEMICOLON@421..422 ";" [] []
    7: TS_TYPE_ALIAS_DECLARATION@422..476
      0: TYPE_KW@422..428 "type" [Newline("\n")] [Whitespace(" ")]
      1: TS_IDENTIFIER_BINDING@428..430
        0: IDENT@428..430 "H" [] [Whitespace(" ")]
      2: (empty)
      3: EQ@430..432 "=" [] [Whitespace(" ")]
      4: TS_CONDITIONAL_TYPE@432..475
        0: TS_REFERENCE_TYPE@432..434
          0: JS_REFERENCE_IDENTIFIER@432..434
            0: IDENT@432..434 "A" [] [Whitespace(" ")]
          1: (empty)
        1: EXTENDS_KW@434..442 "extends" [] [Whitespace(" ")]
        2: TS_FUNCTION_TYPE@442..468
          0: (empty)
          1: JS_PARAMETERS@442..445
            0: L_PAREN@442..443 "(" [] []
            1: JS_PARAMETER_LIST@443..443
            2: R_PAREN@443..445 ")" [] [Whitespace(" ")]
          2: FAT_ARROW@445..448 "=>" [] [Whitespace(" ")]
          3: TS_CONDITIONAL_TYPE@448..468
            0: TS_REFERENCE_TYPE@448..450
              0: JS_REFERENCE_IDENTIFIER@448..450
                0: IDENT@448..450 "B" [] [Whitespace(" ")]
              1: (empty)
            1: EXTENDS_KW@450..458 "extends" [] [Whitespace(" ")]
            2: TS_REFERENCE_TYPE@458..460
              0: JS_REFERENCE_IDENTIFIER@458..460
                0: IDENT@458..460 "C" [] [Whitespace(" ")]
              1: (empty)
            3: QUESTION@460..462 "?" [] [Whitespace(" ")]
            4: TS_REFERENCE_TYPE@462..464
              0: JS_REFERENCE_IDENTIFIER@462..464
                0: IDENT@462..464 "D" [] [Whitespace(" ")]
              1: (empty)
            5: COLON@464..466 ":" [] [Whitespace(" ")]
            6: TS_REFERENCE_TYPE@466..468
              0: JS_REFERENCE_IDENTIFIER@466..468
                0: IDENT@466..468 "E" [] [Whitespace(" ")]
              1: (empty)
        3: QUESTION@468..470 "?" [] [Whitespace(" ")]
        4: TS_REFERENCE_TYPE@470..472
          0: JS_REFERENCE_IDENTIFIER@470..472
            0: IDENT@470..472 "F" [] [Whitespace(" ")]
          1: (empty)
        5: COLON@472..474 ":" [] [Whitespace(" ")]
        6: TS_REFERENCE_TYPE@474..475
          0: JS_REFERENCE_IDENTIFIER@474..475
            0: IDENT@474..475 "G" [] []
          1: (empty)
      5: SEMICOLON@475..476 ";" [] []
    8: TS_TYPE_ALIAS_DECLARATION@476..555
      0: TYPE_KW@476..482 "type" [Newline("\n")] [Whitespace(" ")]
      1: TS_IDENTIFIER_BINDING@482..483
        0: IDENT@482..483 "I" [] []
      2: TS_TYPE_PARAMETERS@483..505
        0: L_ANGLE@483..484 "<" [] []
        1: TS_TYPE_PARAMETER_LIST@484..503
          0: TS_TYPE_PARAMETER@484..485
            0: TS_TYPE_PARAMETER_NAME@484..485
              0: IDENT@484..485 "A" [] []
            1: (empty)
            2: (empty)
          1: COMMA@485..487 "," [] [Whitespace(" ")]
          2: TS_TYPE_PARAMETER@487..488
            0: TS_TYPE_PARAMETER_NAME@487..488
              0: IDENT@487..488 "B" [] []
            1: (empty)
            2: (empty)
          3: COMMA@488..490 "," [] [Whitespace(" ")]
          4: TS_TYPE_PARAMETER@490..491
            0: TS_TYPE_PARAMETER_NAME@490..491
              0: IDENT@490..491 "C" [] []
            1: (empty)
            2: (empty)
          5: COMMA@491..493 "," [] [Whitespace(" ")]
          6: TS_TYPE_PARAMETER@493..494
            0: TS_TYPE_PARAMETER_NAME@493..494
              0: IDENT@493..494 "D" [] []
            1: (empty)
            2: (empty)
          7: COMMA@494..496 "," [] [Whitespace(" ")]
          8: TS_TYPE_PARAMETER@496..497
            0: TS_TYPE_PARAMETER_NAME@496..497
              0: IDENT@496..497 "E" [] []
            1: (empty)
            2: (empty)
          9: COMMA@497..499 "," [] [Whitespace(" ")]
          10: TS_TYPE_PARAMETER@499..500
            0: TS_TYPE_PARAMETER_NAME@499..500
              0: IDENT@499..500 "F" [] []
            1: (empty)
            2: (empty)
          11: COMMA@500..502 "," [] [Whitespace(" ")]
          12: TS_TYPE_PARAMETER@502..503
            0: TS_TYPE_PARAMETER_NAME@502..503
              0: IDENT@502..503 "G" [] []
            1: (empty)
            2: (empty)
        2: R_ANGLE@503..505 ">" [] [Whitespace(" ")]
      3: EQ@505..507 "=" [] [Whitespace(" ")]
      4: TS_CONDITIONAL_TYPE@507..554
        0: TS_REFERENCE_TYPE@507..509
          0: JS_REFERENCE_IDENTIFIER@507..509
            0: IDENT@507..509 "A" [] [Whitespace(" ")]
          1: (empty)
        1: EXTENDS_KW@509..517 "extends" [] [Whitespace(" ")]
        2: TS_FUNCTION_TYPE@517..547
          0: (empty)
          1: JS_PARAMETERS@517..542
            0: L_PAREN@517..518 "(" [] []
            1: JS_PARAMETER_LIST@518..540
              0: JS_FORMAL_PARAMETER@518..540
                0: JS_IDENTIFIER_BINDING@518..519
                  0: IDENT@518..519 "x" [] []
                1: (empty)
                2: TS_TYPE_ANNOTATION@519..540
                  0: COLON@519..521 ":" [] [Whitespace(" ")]
                  1: TS_CONDITIONAL_TYPE@521..540
                    0: TS_REFERENCE_TYPE@521..523
                      0: JS_REFERENCE_IDENTIFIER@521..523
                        0: IDENT@521..523 "B" [] [Whitespace(" ")]
                      1: (empty)
                    1: EXTENDS_KW@523..531 "extends" [] [Whitespace(" ")]
                    2: TS_REFERENCE_TYPE@531..533
                      0: JS_REFERENCE_IDENTIFIER@531..533
                        0: IDENT@531..533 "C" [] [Whitespace(" ")]
                      1: (empty)
                    3: QUESTION@533..535 "?" [] [Whitespace(" ")]
                    4: TS_REFERENCE_TYPE@535..537
                      0: JS_REFERENCE_IDENTIFIER@535..537
                        0: IDENT@535..537 "D" [] [Whitespace(" ")]
                      1: (empty)
                    5: COLON@537..539 ":" [] [Whitespace(" ")]
                    6: TS_REFERENCE_TYPE@539..540
                      0: JS_REFERENCE_IDENTIFIER@539..540
                        0: IDENT@539..540 "E" [] []
                      1: (empty)
                3: (empty)
            2: R_PAREN@540..542 ")" [] [Whitespace(" ")]
          2: FAT_ARROW@542..545 "=>" [] [Whitespace(" ")]
          3: TS_NUMBER_LITERAL_TYPE@545..547
            0: (empty)
            1: JS_NUMBER_LITERAL@545..547 "0" [] [Whitespace(" ")]
        3: QUESTION@547..549 "?" [] [Whitespace(" ")]
        4: TS_REFERENCE_TYPE@549..551
          0: JS_REFERENCE_IDENTIFIER@549..551
            0: IDENT@549..551 "F" [] [Whitespace(" ")]
          1: (empty)
        5: COLON@551..553 ":" [] [Whitespace(" ")]
        6: TS_REFERENCE_TYPE@553..554
          0: JS_REFERENCE_IDENTIFIER@553..554
            0: IDENT@553..554 "G" [] []
          1: (empty)
      5: SEMICOLON@554..555 ";" [] []
    9: TS_TYPE_ALIAS_DECLARATION@555..632
      0: TYPE_KW@555..561 "type" [Newline("\n")] [Whitespace(" ")]
      1: TS_IDENTIFIER_BINDING@561..562
        0: IDENT@561..562 "J" [] []
      2: TS_TYPE_PARAMETERS@562..566
        0: L_ANGLE@562..563 "<" [] []
        1: TS_TYPE_PARAMETER_LIST@563..564
          0: TS_TYPE_PARAMETER@563..564
            0: TS_TYPE_PARAMETER_NAME@563..564
              0: IDENT@563..564 "T" [] []
            1: (empty)
            2: (empty)
        2: R_ANGLE@564..566 ">" [] [Whitespace(" ")]
      3: EQ@566..568 "=" [] [Whitespace(" ")]
      4: TS_CONDITIONAL_TYPE@568..631
        0: TS_REFERENCE_TYPE@568..570
          0: JS_REFERENCE_IDENTIFIER@568..570
            0: IDENT@568..570 "T" [] [Whitespace(" ")]
          1: (empty)
        1: EXTENDS_KW@570..578 "extends" [] [Whitespace(" ")]
        2: TS_PARENTHESIZED_TYPE@578..620
          0: L_PAREN@578..579 "(" [] []
          1: TS_FUNCTION_TYPE@579..618
            0: (empty)
            1: JS_PARAMETERS@579..593
              0: L_PAREN@579..580 "(" [] []
              1: JS_PARAMETER_LIST@580..591
                0: JS_REST_PARAMETER@580..591
                  0: DOT3@580..583 "..." [] []
                  1: JS_IDENTIFIER_BINDING@583..584
                    0: IDENT@583..584 "a" [] []
                  2: TS_TYPE_ANNOTATION@584..591
                    0: COLON@584..586 ":" [] [Whitespace(" ")]
                    1: TS_ARRAY_TYPE@586..591
                      0: TS_ANY_TYPE@586..589
                        0: ANY_KW@586..589 "any" [] []
                      1: L_BRACK@589..590 "[" [] []
                      2: R_BRACK@590..591 "]" [] []
              2: R_PAREN@591..593 ")" [] [Whitespace(" ")]
            2: FAT_ARROW@593..596 "=>" [] [Whitespace(" ")]
            3: TS_INFER_TYPE@596..618
              0: INFER_KW@596..602 "infer" [] [Whitespace(" ")]
              1: TS_TYPE_PARAMETER_NAME@602..604
                0: IDENT@602..604 "R" [] [Whitespace(" ")]
              2: TS_TYPE_CONSTRAINT_CLAUSE@604..618
                0: EXTENDS_KW@604..612 "extends" [] [Whitespace(" ")]
                1: TS_STRING_TYPE@612..618
                  0: STRING_KW@612..618 "string" [] []
          2: R_PAREN@618..620 ")" [] [Whitespace(" ")]
        3: QUESTION@620..622 "?" [] [Whitespace(" ")]
        4: TS_REFERENCE_TYPE@622..624
          0: JS_REFERENCE_IDENTIFIER@622..624
            0: IDENT@622..624 "R" [] [Whitespace(" ")]
          1: (empty)
        5: COLON@624..626 ":" [] [Whitespace(" ")]
        6: TS_NEVER_TYPE@626..631
          0: NEVER_KW@626..631 "never" [] []
      5: SEMICOLON@631..632 ";" [] []
  3: EOF@632..633 "" [Newline("\n")] []
