JsModule {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        JsBogusStatement {
            items: [
                EXPORT_KW@0..8 "export" [Whitespace("\t")] [Whitespace(" ")],
                JsBogus {
                    items: [
                        DEFAULT_KW@8..16 "default" [] [Whitespace(" ")],
                        JsBogus {
                            items: [
                                FUNCTION_KW@16..25 "function" [] [Whitespace(" ")],
                                JsIdentifierBinding {
                                    name_token: IDENT@25..28 "foo" [] [],
                                },
                                JsBogus {
                                    items: [
                                        L_ANGLE@28..29 "<" [] [],
                                        JsBogus {
                                            items: [
                                                TsBogusType {
                                                    items: [
                                                        IN_KW@29..32 "in" [] [Whitespace(" ")],
                                                    ],
                                                },
                                                TsTypeParameter {
                                                    in_modifier_token: missing (optional),
                                                    out_modifier_token: missing (optional),
                                                    name: TsTypeParameterName {
                                                        ident_token: IDENT@32..33 "T" [] [],
                                                    },
                                                    constraint: missing (optional),
                                                    default: missing (optional),
                                                },
                                            ],
                                        },
                                        R_ANGLE@33..34 ">" [] [],
                                    ],
                                },
                                JsParameters {
                                    l_paren_token: L_PAREN@34..35 "(" [] [],
                                    items: JsParameterList [],
                                    r_paren_token: R_PAREN@35..37 ")" [] [Whitespace(" ")],
                                },
                                JsFunctionBody {
                                    l_curly_token: L_CURLY@37..38 "{" [] [],
                                    directives: JsDirectiveList [],
                                    statements: JsStatementList [],
                                    r_curly_token: R_CURLY@38..39 "}" [] [],
                                },
                            ],
                        },
                    ],
                },
            ],
        },
        JsExport {
            export_token: EXPORT_KW@39..48 "export" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")],
            export_clause: JsFunctionDeclaration {
                async_token: missing (optional),
                function_token: FUNCTION_KW@48..57 "function" [] [Whitespace(" ")],
                star_token: missing (optional),
                id: JsIdentifierBinding {
                    name_token: IDENT@57..60 "foo" [] [],
                },
                type_parameters: TsTypeParameters {
                    l_angle_token: L_ANGLE@60..61 "<" [] [],
                    items: TsTypeParameterList [
                        TsTypeParameter {
                            in_modifier_token: missing (optional),
                            out_modifier_token: missing (optional),
                            name: TsTypeParameterName {
                                ident_token: IDENT@61..65 "out" [] [Whitespace(" ")],
                            },
                            constraint: missing (optional),
                            default: missing (optional),
                        },
                        missing separator,
                        TsTypeParameter {
                            in_modifier_token: missing (optional),
                            out_modifier_token: missing (optional),
                            name: TsTypeParameterName {
                                ident_token: IDENT@65..66 "T" [] [],
                            },
                            constraint: missing (optional),
                            default: missing (optional),
                        },
                    ],
                    r_angle_token: R_ANGLE@66..67 ">" [] [],
                },
                parameters: JsParameters {
                    l_paren_token: L_PAREN@67..68 "(" [] [],
                    items: JsParameterList [],
                    r_paren_token: R_PAREN@68..70 ")" [] [Whitespace(" ")],
                },
                return_type_annotation: missing (optional),
                body: JsFunctionBody {
                    l_curly_token: L_CURLY@70..71 "{" [] [],
                    directives: JsDirectiveList [],
                    statements: JsStatementList [],
                    r_curly_token: R_CURLY@71..72 "}" [] [],
                },
            },
        },
        JsBogusStatement {
            items: [
                EXPORT_KW@72..81 "export" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")],
                JsBogusStatement {
                    items: [
                        FUNCTION_KW@81..90 "function" [] [Whitespace(" ")],
                        JsIdentifierBinding {
                            name_token: IDENT@90..94 "foo1" [] [],
                        },
                        JsBogus {
                            items: [
                                L_ANGLE@94..95 "<" [] [],
                                JsBogus {
                                    items: [
                                        TsBogusType {
                                            items: [
                                                IN_KW@95..98 "in" [] [Whitespace(" ")],
                                            ],
                                        },
                                        TsTypeParameter {
                                            in_modifier_token: missing (optional),
                                            out_modifier_token: missing (optional),
                                            name: TsTypeParameterName {
                                                ident_token: IDENT@98..99 "T" [] [],
                                            },
                                            constraint: missing (optional),
                                            default: missing (optional),
                                        },
                                    ],
                                },
                                R_ANGLE@99..100 ">" [] [],
                            ],
                        },
                        JsParameters {
                            l_paren_token: L_PAREN@100..101 "(" [] [],
                            items: JsParameterList [],
                            r_paren_token: R_PAREN@101..103 ")" [] [Whitespace(" ")],
                        },
                        JsFunctionBody {
                            l_curly_token: L_CURLY@103..104 "{" [] [],
                            directives: JsDirectiveList [],
                            statements: JsStatementList [],
                            r_curly_token: R_CURLY@104..105 "}" [] [],
                        },
                    ],
                },
            ],
        },
        JsExport {
            export_token: EXPORT_KW@105..114 "export" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")],
            export_clause: JsFunctionDeclaration {
                async_token: missing (optional),
                function_token: FUNCTION_KW@114..123 "function" [] [Whitespace(" ")],
                star_token: missing (optional),
                id: JsIdentifierBinding {
                    name_token: IDENT@123..127 "foo2" [] [],
                },
                type_parameters: TsTypeParameters {
                    l_angle_token: L_ANGLE@127..128 "<" [] [],
                    items: TsTypeParameterList [
                        TsTypeParameter {
                            in_modifier_token: missing (optional),
                            out_modifier_token: missing (optional),
                            name: TsTypeParameterName {
                                ident_token: IDENT@128..132 "out" [] [Whitespace(" ")],
                            },
                            constraint: missing (optional),
                            default: missing (optional),
                        },
                        missing separator,
                        TsTypeParameter {
                            in_modifier_token: missing (optional),
                            out_modifier_token: missing (optional),
                            name: TsTypeParameterName {
                                ident_token: IDENT@132..133 "T" [] [],
                            },
                            constraint: missing (optional),
                            default: missing (optional),
                        },
                    ],
                    r_angle_token: R_ANGLE@133..134 ">" [] [],
                },
                parameters: JsParameters {
                    l_paren_token: L_PAREN@134..135 "(" [] [],
                    items: JsParameterList [],
                    r_paren_token: R_PAREN@135..137 ")" [] [Whitespace(" ")],
                },
                return_type_annotation: missing (optional),
                body: JsFunctionBody {
                    l_curly_token: L_CURLY@137..138 "{" [] [],
                    directives: JsDirectiveList [],
                    statements: JsStatementList [],
                    r_curly_token: R_CURLY@138..139 "}" [] [],
                },
            },
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: LET_KW@139..145 "let" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@145..148 "foo" [] [],
                        },
                        variable_annotation: TsTypeAnnotation {
                            colon_token: COLON@148..150 ":" [] [Whitespace(" ")],
                            ty: TsReferenceType {
                                name: JsReferenceIdentifier {
                                    value_token: IDENT@150..153 "Foo" [] [],
                                },
                                type_arguments: TsTypeArguments {
                                    l_angle_token: L_ANGLE@153..154 "<" [] [],
                                    ts_type_argument_list: TsTypeArgumentList [
                                        TsReferenceType {
                                            name: JsReferenceIdentifier {
                                                value_token: IDENT@154..157 "in" [] [Whitespace(" ")],
                                            },
                                            type_arguments: missing (optional),
                                        },
                                        missing separator,
                                        TsReferenceType {
                                            name: JsReferenceIdentifier {
                                                value_token: IDENT@157..158 "T" [] [],
                                            },
                                            type_arguments: missing (optional),
                                        },
                                    ],
                                    r_angle_token: R_ANGLE@158..159 ">" [] [],
                                },
                            },
                        },
                        initializer: missing (optional),
                    },
                ],
            },
            semicolon_token: missing (optional),
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: LET_KW@159..165 "let" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@165..168 "foo" [] [],
                        },
                        variable_annotation: TsTypeAnnotation {
                            colon_token: COLON@168..170 ":" [] [Whitespace(" ")],
                            ty: TsReferenceType {
                                name: JsReferenceIdentifier {
                                    value_token: IDENT@170..173 "Foo" [] [],
                                },
                                type_arguments: TsTypeArguments {
                                    l_angle_token: L_ANGLE@173..174 "<" [] [],
                                    ts_type_argument_list: TsTypeArgumentList [
                                        TsReferenceType {
                                            name: JsReferenceIdentifier {
                                                value_token: IDENT@174..178 "out" [] [Whitespace(" ")],
                                            },
                                            type_arguments: missing (optional),
                                        },
                                        missing separator,
                                        TsReferenceType {
                                            name: JsReferenceIdentifier {
                                                value_token: IDENT@178..179 "T" [] [],
                                            },
                                            type_arguments: missing (optional),
                                        },
                                    ],
                                    r_angle_token: R_ANGLE@179..180 ">" [] [],
                                },
                            },
                        },
                        initializer: missing (optional),
                    },
                ],
            },
            semicolon_token: missing (optional),
        },
        JsBogusStatement {
            items: [
                DECLARE_KW@180..190 "declare" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")],
                JsBogusStatement {
                    items: [
                        FUNCTION_KW@190..199 "function" [] [Whitespace(" ")],
                        JsIdentifierBinding {
                            name_token: IDENT@199..202 "foo" [] [],
                        },
                        JsBogus {
                            items: [
                                L_ANGLE@202..203 "<" [] [],
                                JsBogus {
                                    items: [
                                        TsBogusType {
                                            items: [
                                                IN_KW@203..206 "in" [] [Whitespace(" ")],
                                            ],
                                        },
                                        TsTypeParameter {
                                            in_modifier_token: missing (optional),
                                            out_modifier_token: missing (optional),
                                            name: TsTypeParameterName {
                                                ident_token: IDENT@206..207 "T" [] [],
                                            },
                                            constraint: missing (optional),
                                            default: missing (optional),
                                        },
                                    ],
                                },
                                R_ANGLE@207..208 ">" [] [],
                            ],
                        },
                        JsParameters {
                            l_paren_token: L_PAREN@208..209 "(" [] [],
                            items: JsParameterList [],
                            r_paren_token: R_PAREN@209..210 ")" [] [],
                        },
                    ],
                },
            ],
        },
        TsDeclareStatement {
            declare_token: DECLARE_KW@210..220 "declare" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")],
            declaration: TsDeclareFunctionDeclaration {
                async_token: missing (optional),
                function_token: FUNCTION_KW@220..229 "function" [] [Whitespace(" ")],
                id: JsIdentifierBinding {
                    name_token: IDENT@229..232 "foo" [] [],
                },
                type_parameters: TsTypeParameters {
                    l_angle_token: L_ANGLE@232..233 "<" [] [],
                    items: TsTypeParameterList [
                        TsTypeParameter {
                            in_modifier_token: missing (optional),
                            out_modifier_token: missing (optional),
                            name: TsTypeParameterName {
                                ident_token: IDENT@233..237 "out" [] [Whitespace(" ")],
                            },
                            constraint: missing (optional),
                            default: missing (optional),
                        },
                        missing separator,
                        TsTypeParameter {
                            in_modifier_token: missing (optional),
                            out_modifier_token: missing (optional),
                            name: TsTypeParameterName {
                                ident_token: IDENT@237..238 "T" [] [],
                            },
                            constraint: missing (optional),
                            default: missing (optional),
                        },
                    ],
                    r_angle_token: R_ANGLE@238..239 ">" [] [],
                },
                parameters: JsParameters {
                    l_paren_token: L_PAREN@239..240 "(" [] [],
                    items: JsParameterList [],
                    r_paren_token: R_PAREN@240..241 ")" [] [],
                },
                return_type_annotation: missing (optional),
                semicolon_token: missing (optional),
            },
        },
        TsDeclareStatement {
            declare_token: DECLARE_KW@241..251 "declare" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")],
            declaration: JsVariableDeclarationClause {
                declaration: JsVariableDeclaration {
                    kind: LET_KW@251..255 "let" [] [Whitespace(" ")],
                    declarators: JsVariableDeclaratorList [
                        JsVariableDeclarator {
                            id: JsIdentifierBinding {
                                name_token: IDENT@255..258 "foo" [] [],
                            },
                            variable_annotation: TsTypeAnnotation {
                                colon_token: COLON@258..260 ":" [] [Whitespace(" ")],
                                ty: TsReferenceType {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@260..263 "Foo" [] [],
                                    },
                                    type_arguments: TsTypeArguments {
                                        l_angle_token: L_ANGLE@263..264 "<" [] [],
                                        ts_type_argument_list: TsTypeArgumentList [
                                            TsReferenceType {
                                                name: JsReferenceIdentifier {
                                                    value_token: IDENT@264..267 "in" [] [Whitespace(" ")],
                                                },
                                                type_arguments: missing (optional),
                                            },
                                            missing separator,
                                            TsReferenceType {
                                                name: JsReferenceIdentifier {
                                                    value_token: IDENT@267..268 "T" [] [],
                                                },
                                                type_arguments: missing (optional),
                                            },
                                        ],
                                        r_angle_token: R_ANGLE@268..269 ">" [] [],
                                    },
                                },
                            },
                            initializer: missing (optional),
                        },
                    ],
                },
                semicolon_token: missing (optional),
            },
        },
        TsDeclareStatement {
            declare_token: DECLARE_KW@269..279 "declare" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")],
            declaration: JsVariableDeclarationClause {
                declaration: JsVariableDeclaration {
                    kind: LET_KW@279..283 "let" [] [Whitespace(" ")],
                    declarators: JsVariableDeclaratorList [
                        JsVariableDeclarator {
                            id: JsIdentifierBinding {
                                name_token: IDENT@283..286 "foo" [] [],
                            },
                            variable_annotation: TsTypeAnnotation {
                                colon_token: COLON@286..288 ":" [] [Whitespace(" ")],
                                ty: TsReferenceType {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@288..291 "Foo" [] [],
                                    },
                                    type_arguments: TsTypeArguments {
                                        l_angle_token: L_ANGLE@291..292 "<" [] [],
                                        ts_type_argument_list: TsTypeArgumentList [
                                            TsReferenceType {
                                                name: JsReferenceIdentifier {
                                                    value_token: IDENT@292..296 "out" [] [Whitespace(" ")],
                                                },
                                                type_arguments: missing (optional),
                                            },
                                            missing separator,
                                            TsReferenceType {
                                                name: JsReferenceIdentifier {
                                                    value_token: IDENT@296..297 "T" [] [],
                                                },
                                                type_arguments: missing (optional),
                                            },
                                        ],
                                        r_angle_token: R_ANGLE@297..298 ">" [] [],
                                    },
                                },
                            },
                            initializer: missing (optional),
                        },
                    ],
                },
                semicolon_token: missing (optional),
            },
        },
        JsExpressionStatement {
            expression: JsAssignmentExpression {
                left: JsIdentifierAssignment {
                    name_token: IDENT@298..304 "Foo" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")],
                },
                operator_token: EQ@304..306 "=" [] [Whitespace(" ")],
                right: JsClassExpression {
                    class_token: CLASS_KW@306..312 "class" [] [Whitespace(" ")],
                    id: missing (optional),
                    type_parameters: TsTypeParameters {
                        l_angle_token: L_ANGLE@312..313 "<" [] [],
                        items: TsTypeParameterList [
                            TsTypeParameter {
                                in_modifier_token: IN_KW@313..316 "in" [] [Whitespace(" ")],
                                out_modifier_token: missing (optional),
                                name: TsTypeParameterName {
                                    ident_token: IDENT@316..317 "T" [] [],
                                },
                                constraint: missing (optional),
                                default: missing (optional),
                            },
                        ],
                        r_angle_token: R_ANGLE@317..319 ">" [] [Whitespace(" ")],
                    },
                    extends_clause: missing (optional),
                    implements_clause: missing (optional),
                    l_curly_token: L_CURLY@319..320 "{" [] [],
                    members: JsClassMemberList [],
                    r_curly_token: R_CURLY@320..321 "}" [] [],
                },
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsAssignmentExpression {
                left: JsIdentifierAssignment {
                    name_token: IDENT@321..327 "Foo" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")],
                },
                operator_token: EQ@327..329 "=" [] [Whitespace(" ")],
                right: JsClassExpression {
                    class_token: CLASS_KW@329..335 "class" [] [Whitespace(" ")],
                    id: missing (optional),
                    type_parameters: TsTypeParameters {
                        l_angle_token: L_ANGLE@335..336 "<" [] [],
                        items: TsTypeParameterList [
                            TsTypeParameter {
                                in_modifier_token: missing (optional),
                                out_modifier_token: OUT_KW@336..340 "out" [] [Whitespace(" ")],
                                name: TsTypeParameterName {
                                    ident_token: IDENT@340..341 "T" [] [],
                                },
                                constraint: missing (optional),
                                default: missing (optional),
                            },
                        ],
                        r_angle_token: R_ANGLE@341..343 ">" [] [Whitespace(" ")],
                    },
                    extends_clause: missing (optional),
                    implements_clause: missing (optional),
                    l_curly_token: L_CURLY@343..344 "{" [] [],
                    members: JsClassMemberList [],
                    r_curly_token: R_CURLY@344..345 "}" [] [],
                },
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsAssignmentExpression {
                left: JsIdentifierAssignment {
                    name_token: IDENT@345..351 "foo" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")],
                },
                operator_token: EQ@351..353 "=" [] [Whitespace(" ")],
                right: JsBogusExpression {
                    items: [
                        FUNCTION_KW@353..362 "function" [] [Whitespace(" ")],
                        JsBogus {
                            items: [
                                L_ANGLE@362..363 "<" [] [],
                                JsBogus {
                                    items: [
                                        TsBogusType {
                                            items: [
                                                IN_KW@363..366 "in" [] [Whitespace(" ")],
                                            ],
                                        },
                                        TsTypeParameter {
                                            in_modifier_token: missing (optional),
                                            out_modifier_token: missing (optional),
                                            name: TsTypeParameterName {
                                                ident_token: IDENT@366..367 "T" [] [],
                                            },
                                            constraint: missing (optional),
                                            default: missing (optional),
                                        },
                                    ],
                                },
                                R_ANGLE@367..368 ">" [] [],
                            ],
                        },
                        JsParameters {
                            l_paren_token: L_PAREN@368..369 "(" [] [],
                            items: JsParameterList [],
                            r_paren_token: R_PAREN@369..371 ")" [] [Whitespace(" ")],
                        },
                        JsFunctionBody {
                            l_curly_token: L_CURLY@371..372 "{" [] [],
                            directives: JsDirectiveList [],
                            statements: JsStatementList [],
                            r_curly_token: R_CURLY@372..373 "}" [] [],
                        },
                    ],
                },
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsAssignmentExpression {
                left: JsIdentifierAssignment {
                    name_token: IDENT@373..379 "foo" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")],
                },
                operator_token: EQ@379..381 "=" [] [Whitespace(" ")],
                right: JsFunctionExpression {
                    async_token: missing (optional),
                    function_token: FUNCTION_KW@381..390 "function" [] [Whitespace(" ")],
                    star_token: missing (optional),
                    id: missing (optional),
                    type_parameters: TsTypeParameters {
                        l_angle_token: L_ANGLE@390..391 "<" [] [],
                        items: TsTypeParameterList [
                            TsTypeParameter {
                                in_modifier_token: missing (optional),
                                out_modifier_token: missing (optional),
                                name: TsTypeParameterName {
                                    ident_token: IDENT@391..395 "out" [] [Whitespace(" ")],
                                },
                                constraint: missing (optional),
                                default: missing (optional),
                            },
                            missing separator,
                            TsTypeParameter {
                                in_modifier_token: missing (optional),
                                out_modifier_token: missing (optional),
                                name: TsTypeParameterName {
                                    ident_token: IDENT@395..396 "T" [] [],
                                },
                                constraint: missing (optional),
                                default: missing (optional),
                            },
                        ],
                        r_angle_token: R_ANGLE@396..397 ">" [] [],
                    },
                    parameters: JsParameters {
                        l_paren_token: L_PAREN@397..398 "(" [] [],
                        items: JsParameterList [],
                        r_paren_token: R_PAREN@398..400 ")" [] [Whitespace(" ")],
                    },
                    return_type_annotation: missing (optional),
                    body: JsFunctionBody {
                        l_curly_token: L_CURLY@400..401 "{" [] [],
                        directives: JsDirectiveList [],
                        statements: JsStatementList [],
                        r_curly_token: R_CURLY@401..402 "}" [] [],
                    },
                },
            },
            semicolon_token: missing (optional),
        },
        JsClassDeclaration {
            abstract_token: missing (optional),
            class_token: CLASS_KW@402..410 "class" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")],
            id: JsIdentifierBinding {
                name_token: IDENT@410..414 "Foo" [] [Whitespace(" ")],
            },
            type_parameters: missing (optional),
            extends_clause: missing (optional),
            implements_clause: missing (optional),
            l_curly_token: L_CURLY@414..416 "{" [] [Whitespace(" ")],
            members: JsClassMemberList [
                JsBogusMember {
                    items: [
                        JsMethodModifierList [],
                        JsLiteralMemberName {
                            value: IDENT@416..419 "foo" [] [],
                        },
                        JsBogus {
                            items: [
                                L_ANGLE@419..420 "<" [] [],
                                JsBogus {
                                    items: [
                                        TsBogusType {
                                            items: [
                                                IN_KW@420..423 "in" [] [Whitespace(" ")],
                                            ],
                                        },
                                        TsTypeParameter {
                                            in_modifier_token: missing (optional),
                                            out_modifier_token: missing (optional),
                                            name: TsTypeParameterName {
                                                ident_token: IDENT@423..424 "T" [] [],
                                            },
                                            constraint: missing (optional),
                                            default: missing (optional),
                                        },
                                    ],
                                },
                                R_ANGLE@424..425 ">" [] [],
                            ],
                        },
                        JsParameters {
                            l_paren_token: L_PAREN@425..426 "(" [] [],
                            items: JsParameterList [],
                            r_paren_token: R_PAREN@426..427 ")" [] [],
                        },
                        TsReturnTypeAnnotation {
                            colon_token: COLON@427..429 ":" [] [Whitespace(" ")],
                            ty: TsReferenceType {
                                name: JsReferenceIdentifier {
                                    value_token: IDENT@429..431 "T" [] [Whitespace(" ")],
                                },
                                type_arguments: missing (optional),
                            },
                        },
                        JsFunctionBody {
                            l_curly_token: L_CURLY@431..432 "{" [] [],
                            directives: JsDirectiveList [],
                            statements: JsStatementList [],
                            r_curly_token: R_CURLY@432..434 "}" [] [Whitespace(" ")],
                        },
                    ],
                },
            ],
            r_curly_token: R_CURLY@434..435 "}" [] [],
        },
        JsClassDeclaration {
            abstract_token: missing (optional),
            class_token: CLASS_KW@435..443 "class" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")],
            id: JsIdentifierBinding {
                name_token: IDENT@443..447 "Foo" [] [Whitespace(" ")],
            },
            type_parameters: missing (optional),
            extends_clause: missing (optional),
            implements_clause: missing (optional),
            l_curly_token: L_CURLY@447..449 "{" [] [Whitespace(" ")],
            members: JsClassMemberList [
                JsMethodClassMember {
                    modifiers: JsMethodModifierList [],
                    async_token: missing (optional),
                    star_token: missing (optional),
                    name: JsLiteralMemberName {
                        value: IDENT@449..452 "foo" [] [],
                    },
                    question_mark_token: missing (optional),
                    type_parameters: TsTypeParameters {
                        l_angle_token: L_ANGLE@452..453 "<" [] [],
                        items: TsTypeParameterList [
                            TsTypeParameter {
                                in_modifier_token: missing (optional),
                                out_modifier_token: missing (optional),
                                name: TsTypeParameterName {
                                    ident_token: IDENT@453..457 "out" [] [Whitespace(" ")],
                                },
                                constraint: missing (optional),
                                default: missing (optional),
                            },
                            missing separator,
                            TsTypeParameter {
                                in_modifier_token: missing (optional),
                                out_modifier_token: missing (optional),
                                name: TsTypeParameterName {
                                    ident_token: IDENT@457..458 "T" [] [],
                                },
                                constraint: missing (optional),
                                default: missing (optional),
                            },
                        ],
                        r_angle_token: R_ANGLE@458..459 ">" [] [],
                    },
                    parameters: JsParameters {
                        l_paren_token: L_PAREN@459..460 "(" [] [],
                        items: JsParameterList [],
                        r_paren_token: R_PAREN@460..461 ")" [] [],
                    },
                    return_type_annotation: TsReturnTypeAnnotation {
                        colon_token: COLON@461..463 ":" [] [Whitespace(" ")],
                        ty: TsReferenceType {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@463..465 "T" [] [Whitespace(" ")],
                            },
                            type_arguments: missing (optional),
                        },
                    },
                    body: JsFunctionBody {
                        l_curly_token: L_CURLY@465..466 "{" [] [],
                        directives: JsDirectiveList [],
                        statements: JsStatementList [],
                        r_curly_token: R_CURLY@466..468 "}" [] [Whitespace(" ")],
                    },
                },
            ],
            r_curly_token: R_CURLY@468..469 "}" [] [],
        },
        JsExpressionStatement {
            expression: JsAssignmentExpression {
                left: JsIdentifierAssignment {
                    name_token: IDENT@469..475 "foo" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")],
                },
                operator_token: EQ@475..477 "=" [] [Whitespace(" ")],
                right: JsObjectExpression {
                    l_curly_token: L_CURLY@477..479 "{" [] [Whitespace(" ")],
                    members: JsObjectMemberList [
                        JsBogusMember {
                            items: [
                                JsLiteralMemberName {
                                    value: IDENT@479..482 "foo" [] [],
                                },
                                JsBogus {
                                    items: [
                                        L_ANGLE@482..483 "<" [] [],
                                        JsBogus {
                                            items: [
                                                TsBogusType {
                                                    items: [
                                                        IN_KW@483..486 "in" [] [Whitespace(" ")],
                                                    ],
                                                },
                                                TsTypeParameter {
                                                    in_modifier_token: missing (optional),
                                                    out_modifier_token: missing (optional),
                                                    name: TsTypeParameterName {
                                                        ident_token: IDENT@486..487 "T" [] [],
                                                    },
                                                    constraint: missing (optional),
                                                    default: missing (optional),
                                                },
                                            ],
                                        },
                                        R_ANGLE@487..488 ">" [] [],
                                    ],
                                },
                                JsParameters {
                                    l_paren_token: L_PAREN@488..489 "(" [] [],
                                    items: JsParameterList [],
                                    r_paren_token: R_PAREN@489..490 ")" [] [],
                                },
                                TsReturnTypeAnnotation {
                                    colon_token: COLON@490..492 ":" [] [Whitespace(" ")],
                                    ty: TsReferenceType {
                                        name: JsReferenceIdentifier {
                                            value_token: IDENT@492..494 "T" [] [Whitespace(" ")],
                                        },
                                        type_arguments: missing (optional),
                                    },
                                },
                                JsFunctionBody {
                                    l_curly_token: L_CURLY@494..495 "{" [] [],
                                    directives: JsDirectiveList [],
                                    statements: JsStatementList [],
                                    r_curly_token: R_CURLY@495..497 "}" [] [Whitespace(" ")],
                                },
                            ],
                        },
                    ],
                    r_curly_token: R_CURLY@497..498 "}" [] [],
                },
            },
            semicolon_token: SEMICOLON@498..499 ";" [] [],
        },
        JsExpressionStatement {
            expression: JsAssignmentExpression {
                left: JsIdentifierAssignment {
                    name_token: IDENT@499..505 "foo" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")],
                },
                operator_token: EQ@505..507 "=" [] [Whitespace(" ")],
                right: JsObjectExpression {
                    l_curly_token: L_CURLY@507..509 "{" [] [Whitespace(" ")],
                    members: JsObjectMemberList [
                        JsMethodObjectMember {
                            async_token: missing (optional),
                            star_token: missing (optional),
                            name: JsLiteralMemberName {
                                value: IDENT@509..512 "foo" [] [],
                            },
                            type_parameters: TsTypeParameters {
                                l_angle_token: L_ANGLE@512..513 "<" [] [],
                                items: TsTypeParameterList [
                                    TsTypeParameter {
                                        in_modifier_token: missing (optional),
                                        out_modifier_token: missing (optional),
                                        name: TsTypeParameterName {
                                            ident_token: IDENT@513..517 "out" [] [Whitespace(" ")],
                                        },
                                        constraint: missing (optional),
                                        default: missing (optional),
                                    },
                                    missing separator,
                                    TsTypeParameter {
                                        in_modifier_token: missing (optional),
                                        out_modifier_token: missing (optional),
                                        name: TsTypeParameterName {
                                            ident_token: IDENT@517..518 "T" [] [],
                                        },
                                        constraint: missing (optional),
                                        default: missing (optional),
                                    },
                                ],
                                r_angle_token: R_ANGLE@518..519 ">" [] [],
                            },
                            parameters: JsParameters {
                                l_paren_token: L_PAREN@519..520 "(" [] [],
                                items: JsParameterList [],
                                r_paren_token: R_PAREN@520..521 ")" [] [],
                            },
                            return_type_annotation: TsReturnTypeAnnotation {
                                colon_token: COLON@521..523 ":" [] [Whitespace(" ")],
                                ty: TsReferenceType {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@523..525 "T" [] [Whitespace(" ")],
                                    },
                                    type_arguments: missing (optional),
                                },
                            },
                            body: JsFunctionBody {
                                l_curly_token: L_CURLY@525..526 "{" [] [],
                                directives: JsDirectiveList [],
                                statements: JsStatementList [],
                                r_curly_token: R_CURLY@526..528 "}" [] [Whitespace(" ")],
                            },
                        },
                    ],
                    r_curly_token: R_CURLY@528..529 "}" [] [],
                },
            },
            semicolon_token: SEMICOLON@529..530 ";" [] [],
        },
        JsExpressionStatement {
            expression: JsBinaryExpression {
                left: TsTypeAssertionExpression {
                    l_angle_token: L_ANGLE@530..533 "<" [Newline("\n"), Whitespace("\t")] [],
                    ty: TsReferenceType {
                        name: JsReferenceIdentifier {
                            value_token: IDENT@533..536 "in" [] [Whitespace(" ")],
                        },
                        type_arguments: missing (optional),
                    },
                    r_angle_token: missing (required),
                    expression: JsIdentifierExpression {
                        name: JsReferenceIdentifier {
                            value_token: IDENT@536..537 "T" [] [],
                        },
                    },
                },
                operator_token: R_ANGLE@537..538 ">" [] [],
                right: JsParenthesizedExpression {
                    l_paren_token: L_PAREN@538..539 "(" [] [],
                    expression: missing (required),
                    r_paren_token: R_PAREN@539..541 ")" [] [Whitespace(" ")],
                },
            },
            semicolon_token: missing (optional),
        },
        JsBogusStatement {
            items: [
                FAT_ARROW@541..544 "=>" [] [Whitespace(" ")],
            ],
        },
        JsBlockStatement {
            l_curly_token: L_CURLY@544..545 "{" [] [],
            statements: JsStatementList [],
            r_curly_token: R_CURLY@545..546 "}" [] [],
        },
        JsEmptyStatement {
            semicolon_token: SEMICOLON@546..547 ";" [] [],
        },
        JsExpressionStatement {
            expression: JsArrowFunctionExpression {
                async_token: missing (optional),
                type_parameters: TsTypeParameters {
                    l_angle_token: L_ANGLE@547..550 "<" [Newline("\n"), Whitespace("\t")] [],
                    items: TsTypeParameterList [
                        TsTypeParameter {
                            in_modifier_token: missing (optional),
                            out_modifier_token: missing (optional),
                            name: TsTypeParameterName {
                                ident_token: IDENT@550..554 "out" [] [Whitespace(" ")],
                            },
                            constraint: missing (optional),
                            default: missing (optional),
                        },
                        missing separator,
                        TsTypeParameter {
                            in_modifier_token: missing (optional),
                            out_modifier_token: missing (optional),
                            name: TsTypeParameterName {
                                ident_token: IDENT@554..555 "T" [] [],
                            },
                            constraint: missing (optional),
                            default: missing (optional),
                        },
                    ],
                    r_angle_token: R_ANGLE@555..556 ">" [] [],
                },
                parameters: JsParameters {
                    l_paren_token: L_PAREN@556..557 "(" [] [],
                    items: JsParameterList [],
                    r_paren_token: R_PAREN@557..559 ")" [] [Whitespace(" ")],
                },
                return_type_annotation: missing (optional),
                fat_arrow_token: FAT_ARROW@559..562 "=>" [] [Whitespace(" ")],
                body: JsFunctionBody {
                    l_curly_token: L_CURLY@562..563 "{" [] [],
                    directives: JsDirectiveList [],
                    statements: JsStatementList [],
                    r_curly_token: R_CURLY@563..564 "}" [] [],
                },
            },
            semicolon_token: SEMICOLON@564..565 ";" [] [],
        },
        JsExpressionStatement {
            expression: JsSequenceExpression {
                left: TsTypeAssertionExpression {
                    l_angle_token: L_ANGLE@565..568 "<" [Newline("\n"), Whitespace("\t")] [],
                    ty: TsReferenceType {
                        name: JsReferenceIdentifier {
                            value_token: IDENT@568..571 "in" [] [Whitespace(" ")],
                        },
                        type_arguments: missing (optional),
                    },
                    r_angle_token: missing (required),
                    expression: JsIdentifierExpression {
                        name: JsReferenceIdentifier {
                            value_token: IDENT@571..572 "T" [] [],
                        },
                    },
                },
                comma_token: COMMA@572..574 "," [] [Whitespace(" ")],
                right: JsIdentifierExpression {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@574..578 "out" [] [Whitespace(" ")],
                    },
                },
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsBinaryExpression {
                left: JsIdentifierExpression {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@578..579 "T" [] [],
                    },
                },
                operator_token: R_ANGLE@579..580 ">" [] [],
                right: JsParenthesizedExpression {
                    l_paren_token: L_PAREN@580..581 "(" [] [],
                    expression: missing (required),
                    r_paren_token: R_PAREN@581..583 ")" [] [Whitespace(" ")],
                },
            },
            semicolon_token: missing (optional),
        },
        JsBogusStatement {
            items: [
                FAT_ARROW@583..586 "=>" [] [Whitespace(" ")],
            ],
        },
        JsBlockStatement {
            l_curly_token: L_CURLY@586..587 "{" [] [],
            statements: JsStatementList [],
            r_curly_token: R_CURLY@587..588 "}" [] [],
        },
        JsEmptyStatement {
            semicolon_token: SEMICOLON@588..589 ";" [] [],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: LET_KW@589..595 "let" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@595..596 "x" [] [],
                        },
                        variable_annotation: TsTypeAnnotation {
                            colon_token: COLON@596..598 ":" [] [Whitespace(" ")],
                            ty: TsBogusType {
                                items: [
                                    JsBogus {
                                        items: [
                                            L_ANGLE@598..599 "<" [] [],
                                            JsBogus {
                                                items: [
                                                    TsBogusType {
                                                        items: [
                                                            IN_KW@599..602 "in" [] [Whitespace(" ")],
                                                        ],
                                                    },
                                                    TsTypeParameter {
                                                        in_modifier_token: missing (optional),
                                                        out_modifier_token: missing (optional),
                                                        name: TsTypeParameterName {
                                                            ident_token: IDENT@602..603 "T" [] [],
                                                        },
                                                        constraint: missing (optional),
                                                        default: missing (optional),
                                                    },
                                                ],
                                            },
                                            R_ANGLE@603..604 ">" [] [],
                                        ],
                                    },
                                    JsParameters {
                                        l_paren_token: L_PAREN@604..605 "(" [] [],
                                        items: JsParameterList [],
                                        r_paren_token: R_PAREN@605..607 ")" [] [Whitespace(" ")],
                                    },
                                    FAT_ARROW@607..610 "=>" [] [Whitespace(" ")],
                                    TsObjectType {
                                        l_curly_token: L_CURLY@610..611 "{" [] [],
                                        members: TsTypeMemberList [],
                                        r_curly_token: R_CURLY@611..612 "}" [] [],
                                    },
                                ],
                            },
                        },
                        initializer: missing (optional),
                    },
                ],
            },
            semicolon_token: SEMICOLON@612..613 ";" [] [],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: LET_KW@613..619 "let" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@619..620 "x" [] [],
                        },
                        variable_annotation: TsTypeAnnotation {
                            colon_token: COLON@620..622 ":" [] [Whitespace(" ")],
                            ty: TsFunctionType {
                                type_parameters: TsTypeParameters {
                                    l_angle_token: L_ANGLE@622..623 "<" [] [],
                                    items: TsTypeParameterList [
                                        TsTypeParameter {
                                            in_modifier_token: missing (optional),
                                            out_modifier_token: missing (optional),
                                            name: TsTypeParameterName {
                                                ident_token: IDENT@623..627 "out" [] [Whitespace(" ")],
                                            },
                                            constraint: missing (optional),
                                            default: missing (optional),
                                        },
                                        missing separator,
                                        TsTypeParameter {
                                            in_modifier_token: missing (optional),
                                            out_modifier_token: missing (optional),
                                            name: TsTypeParameterName {
                                                ident_token: IDENT@627..628 "T" [] [],
                                            },
                                            constraint: missing (optional),
                                            default: missing (optional),
                                        },
                                    ],
                                    r_angle_token: R_ANGLE@628..629 ">" [] [],
                                },
                                parameters: JsParameters {
                                    l_paren_token: L_PAREN@629..630 "(" [] [],
                                    items: JsParameterList [],
                                    r_paren_token: R_PAREN@630..632 ")" [] [Whitespace(" ")],
                                },
                                fat_arrow_token: FAT_ARROW@632..635 "=>" [] [Whitespace(" ")],
                                return_type: TsObjectType {
                                    l_curly_token: L_CURLY@635..636 "{" [] [],
                                    members: TsTypeMemberList [],
                                    r_curly_token: R_CURLY@636..637 "}" [] [],
                                },
                            },
                        },
                        initializer: missing (optional),
                    },
                ],
            },
            semicolon_token: SEMICOLON@637..638 ";" [] [],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: LET_KW@638..644 "let" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@644..645 "x" [] [],
                        },
                        variable_annotation: TsTypeAnnotation {
                            colon_token: COLON@645..647 ":" [] [Whitespace(" ")],
                            ty: TsBogusType {
                                items: [
                                    JsBogus {
                                        items: [
                                            L_ANGLE@647..648 "<" [] [],
                                            JsBogus {
                                                items: [
                                                    TsBogusType {
                                                        items: [
                                                            IN_KW@648..651 "in" [] [Whitespace(" ")],
                                                        ],
                                                    },
                                                    TsTypeParameter {
                                                        in_modifier_token: missing (optional),
                                                        out_modifier_token: missing (optional),
                                                        name: TsTypeParameterName {
                                                            ident_token: IDENT@651..652 "T" [] [],
                                                        },
                                                        constraint: missing (optional),
                                                        default: missing (optional),
                                                    },
                                                    COMMA@652..654 "," [] [Whitespace(" ")],
                                                    TsTypeParameter {
                                                        in_modifier_token: missing (optional),
                                                        out_modifier_token: missing (optional),
                                                        name: TsTypeParameterName {
                                                            ident_token: IDENT@654..658 "out" [] [Whitespace(" ")],
                                                        },
                                                        constraint: missing (optional),
                                                        default: missing (optional),
                                                    },
                                                    TsTypeParameter {
                                                        in_modifier_token: missing (optional),
                                                        out_modifier_token: missing (optional),
                                                        name: TsTypeParameterName {
                                                            ident_token: IDENT@658..659 "T" [] [],
                                                        },
                                                        constraint: missing (optional),
                                                        default: missing (optional),
                                                    },
                                                ],
                                            },
                                            R_ANGLE@659..660 ">" [] [],
                                        ],
                                    },
                                    JsParameters {
                                        l_paren_token: L_PAREN@660..661 "(" [] [],
                                        items: JsParameterList [],
                                        r_paren_token: R_PAREN@661..663 ")" [] [Whitespace(" ")],
                                    },
                                    FAT_ARROW@663..666 "=>" [] [Whitespace(" ")],
                                    TsObjectType {
                                        l_curly_token: L_CURLY@666..667 "{" [] [],
                                        members: TsTypeMemberList [],
                                        r_curly_token: R_CURLY@667..668 "}" [] [],
                                    },
                                ],
                            },
                        },
                        initializer: missing (optional),
                    },
                ],
            },
            semicolon_token: SEMICOLON@668..669 ";" [] [],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: LET_KW@669..675 "let" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@675..676 "x" [] [],
                        },
                        variable_annotation: TsTypeAnnotation {
                            colon_token: COLON@676..678 ":" [] [Whitespace(" ")],
                            ty: TsBogusType {
                                items: [
                                    NEW_KW@678..682 "new" [] [Whitespace(" ")],
                                    JsBogus {
                                        items: [
                                            L_ANGLE@682..683 "<" [] [],
                                            JsBogus {
                                                items: [
                                                    TsBogusType {
                                                        items: [
                                                            IN_KW@683..686 "in" [] [Whitespace(" ")],
                                                        ],
                                                    },
                                                    TsTypeParameter {
                                                        in_modifier_token: missing (optional),
                                                        out_modifier_token: missing (optional),
                                                        name: TsTypeParameterName {
                                                            ident_token: IDENT@686..687 "T" [] [],
                                                        },
                                                        constraint: missing (optional),
                                                        default: missing (optional),
                                                    },
                                                ],
                                            },
                                            R_ANGLE@687..688 ">" [] [],
                                        ],
                                    },
                                    JsParameters {
                                        l_paren_token: L_PAREN@688..689 "(" [] [],
                                        items: JsParameterList [],
                                        r_paren_token: R_PAREN@689..691 ")" [] [Whitespace(" ")],
                                    },
                                    FAT_ARROW@691..694 "=>" [] [Whitespace(" ")],
                                    TsObjectType {
                                        l_curly_token: L_CURLY@694..695 "{" [] [],
                                        members: TsTypeMemberList [],
                                        r_curly_token: R_CURLY@695..696 "}" [] [],
                                    },
                                ],
                            },
                        },
                        initializer: missing (optional),
                    },
                ],
            },
            semicolon_token: SEMICOLON@696..697 ";" [] [],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: LET_KW@697..703 "let" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@703..704 "x" [] [],
                        },
                        variable_annotation: TsTypeAnnotation {
                            colon_token: COLON@704..706 ":" [] [Whitespace(" ")],
                            ty: TsConstructorType {
                                abstract_token: missing (optional),
                                new_token: NEW_KW@706..710 "new" [] [Whitespace(" ")],
                                type_parameters: TsTypeParameters {
                                    l_angle_token: L_ANGLE@710..711 "<" [] [],
                                    items: TsTypeParameterList [
                                        TsTypeParameter {
                                            in_modifier_token: missing (optional),
                                            out_modifier_token: missing (optional),
                                            name: TsTypeParameterName {
                                                ident_token: IDENT@711..715 "out" [] [Whitespace(" ")],
                                            },
                                            constraint: missing (optional),
                                            default: missing (optional),
                                        },
                                        missing separator,
                                        TsTypeParameter {
                                            in_modifier_token: missing (optional),
                                            out_modifier_token: missing (optional),
                                            name: TsTypeParameterName {
                                                ident_token: IDENT@715..716 "T" [] [],
                                            },
                                            constraint: missing (optional),
                                            default: missing (optional),
                                        },
                                    ],
                                    r_angle_token: R_ANGLE@716..717 ">" [] [],
                                },
                                parameters: JsParameters {
                                    l_paren_token: L_PAREN@717..718 "(" [] [],
                                    items: JsParameterList [],
                                    r_paren_token: R_PAREN@718..720 ")" [] [Whitespace(" ")],
                                },
                                fat_arrow_token: FAT_ARROW@720..723 "=>" [] [Whitespace(" ")],
                                return_type: TsObjectType {
                                    l_curly_token: L_CURLY@723..724 "{" [] [],
                                    members: TsTypeMemberList [],
                                    r_curly_token: R_CURLY@724..725 "}" [] [],
                                },
                            },
                        },
                        initializer: missing (optional),
                    },
                ],
            },
            semicolon_token: SEMICOLON@725..726 ";" [] [],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: LET_KW@726..732 "let" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@732..733 "x" [] [],
                        },
                        variable_annotation: TsTypeAnnotation {
                            colon_token: COLON@733..735 ":" [] [Whitespace(" ")],
                            ty: TsBogusType {
                                items: [
                                    NEW_KW@735..739 "new" [] [Whitespace(" ")],
                                    JsBogus {
                                        items: [
                                            L_ANGLE@739..740 "<" [] [],
                                            JsBogus {
                                                items: [
                                                    TsBogusType {
                                                        items: [
                                                            IN_KW@740..743 "in" [] [Whitespace(" ")],
                                                        ],
                                                    },
                                                    TsTypeParameter {
                                                        in_modifier_token: missing (optional),
                                                        out_modifier_token: missing (optional),
                                                        name: TsTypeParameterName {
                                                            ident_token: IDENT@743..744 "T" [] [],
                                                        },
                                                        constraint: missing (optional),
                                                        default: missing (optional),
                                                    },
                                                    COMMA@744..746 "," [] [Whitespace(" ")],
                                                    TsTypeParameter {
                                                        in_modifier_token: missing (optional),
                                                        out_modifier_token: missing (optional),
                                                        name: TsTypeParameterName {
                                                            ident_token: IDENT@746..750 "out" [] [Whitespace(" ")],
                                                        },
                                                        constraint: missing (optional),
                                                        default: missing (optional),
                                                    },
                                                    TsTypeParameter {
                                                        in_modifier_token: missing (optional),
                                                        out_modifier_token: missing (optional),
                                                        name: TsTypeParameterName {
                                                            ident_token: IDENT@750..751 "T" [] [],
                                                        },
                                                        constraint: missing (optional),
                                                        default: missing (optional),
                                                    },
                                                ],
                                            },
                                            R_ANGLE@751..752 ">" [] [],
                                        ],
                                    },
                                    JsParameters {
                                        l_paren_token: L_PAREN@752..753 "(" [] [],
                                        items: JsParameterList [],
                                        r_paren_token: R_PAREN@753..755 ")" [] [Whitespace(" ")],
                                    },
                                    FAT_ARROW@755..758 "=>" [] [Whitespace(" ")],
                                    TsObjectType {
                                        l_curly_token: L_CURLY@758..759 "{" [] [],
                                        members: TsTypeMemberList [],
                                        r_curly_token: R_CURLY@759..760 "}" [] [],
                                    },
                                ],
                            },
                        },
                        initializer: missing (optional),
                    },
                ],
            },
            semicolon_token: SEMICOLON@760..761 ";" [] [],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: LET_KW@761..767 "let" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@767..768 "x" [] [],
                        },
                        variable_annotation: TsTypeAnnotation {
                            colon_token: COLON@768..770 ":" [] [Whitespace(" ")],
                            ty: TsBogusType {
                                items: [
                                    L_CURLY@770..772 "{" [] [Whitespace(" ")],
                                    JsBogus {
                                        items: [
                                            JsBogus {
                                                items: [
                                                    JsLiteralMemberName {
                                                        value: IDENT@772..773 "y" [] [],
                                                    },
                                                    JsBogus {
                                                        items: [
                                                            L_ANGLE@773..774 "<" [] [],
                                                            JsBogus {
                                                                items: [
                                                                    TsBogusType {
                                                                        items: [
                                                                            IN_KW@774..777 "in" [] [Whitespace(" ")],
                                                                        ],
                                                                    },
                                                                    TsTypeParameter {
                                                                        in_modifier_token: missing (optional),
                                                                        out_modifier_token: missing (optional),
                                                                        name: TsTypeParameterName {
                                                                            ident_token: IDENT@777..778 "T" [] [],
                                                                        },
                                                                        constraint: missing (optional),
                                                                        default: missing (optional),
                                                                    },
                                                                ],
                                                            },
                                                            R_ANGLE@778..779 ">" [] [],
                                                        ],
                                                    },
                                                    JsParameters {
                                                        l_paren_token: L_PAREN@779..780 "(" [] [],
                                                        items: JsParameterList [],
                                                        r_paren_token: R_PAREN@780..781 ")" [] [],
                                                    },
                                                    TsReturnTypeAnnotation {
                                                        colon_token: COLON@781..783 ":" [] [Whitespace(" ")],
                                                        ty: TsAnyType {
                                                            any_token: ANY_KW@783..787 "any" [] [Whitespace(" ")],
                                                        },
                                                    },
                                                ],
                                            },
                                        ],
                                    },
                                    R_CURLY@787..788 "}" [] [],
                                ],
                            },
                        },
                        initializer: missing (optional),
                    },
                ],
            },
            semicolon_token: SEMICOLON@788..789 ";" [] [],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: LET_KW@789..795 "let" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@795..796 "x" [] [],
                        },
                        variable_annotation: TsTypeAnnotation {
                            colon_token: COLON@796..798 ":" [] [Whitespace(" ")],
                            ty: TsObjectType {
                                l_curly_token: L_CURLY@798..800 "{" [] [Whitespace(" ")],
                                members: TsTypeMemberList [
                                    TsMethodSignatureTypeMember {
                                        name: JsLiteralMemberName {
                                            value: IDENT@800..801 "y" [] [],
                                        },
                                        optional_token: missing (optional),
                                        type_parameters: TsTypeParameters {
                                            l_angle_token: L_ANGLE@801..802 "<" [] [],
                                            items: TsTypeParameterList [
                                                TsTypeParameter {
                                                    in_modifier_token: missing (optional),
                                                    out_modifier_token: missing (optional),
                                                    name: TsTypeParameterName {
                                                        ident_token: IDENT@802..806 "out" [] [Whitespace(" ")],
                                                    },
                                                    constraint: missing (optional),
                                                    default: missing (optional),
                                                },
                                                missing separator,
                                                TsTypeParameter {
                                                    in_modifier_token: missing (optional),
                                                    out_modifier_token: missing (optional),
                                                    name: TsTypeParameterName {
                                                        ident_token: IDENT@806..807 "T" [] [],
                                                    },
                                                    constraint: missing (optional),
                                                    default: missing (optional),
                                                },
                                            ],
                                            r_angle_token: R_ANGLE@807..808 ">" [] [],
                                        },
                                        parameters: JsParameters {
                                            l_paren_token: L_PAREN@808..809 "(" [] [],
                                            items: JsParameterList [],
                                            r_paren_token: R_PAREN@809..810 ")" [] [],
                                        },
                                        return_type_annotation: TsReturnTypeAnnotation {
                                            colon_token: COLON@810..812 ":" [] [Whitespace(" ")],
                                            ty: TsAnyType {
                                                any_token: ANY_KW@812..816 "any" [] [Whitespace(" ")],
                                            },
                                        },
                                        separator_token: missing (optional),
                                    },
                                ],
                                r_curly_token: R_CURLY@816..817 "}" [] [],
                            },
                        },
                        initializer: missing (optional),
                    },
                ],
            },
            semicolon_token: SEMICOLON@817..818 ";" [] [],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: LET_KW@818..824 "let" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@824..825 "x" [] [],
                        },
                        variable_annotation: TsTypeAnnotation {
                            colon_token: COLON@825..827 ":" [] [Whitespace(" ")],
                            ty: TsBogusType {
                                items: [
                                    L_CURLY@827..829 "{" [] [Whitespace(" ")],
                                    JsBogus {
                                        items: [
                                            JsBogus {
                                                items: [
                                                    JsLiteralMemberName {
                                                        value: IDENT@829..830 "y" [] [],
                                                    },
                                                    JsBogus {
                                                        items: [
                                                            L_ANGLE@830..831 "<" [] [],
                                                            JsBogus {
                                                                items: [
                                                                    TsBogusType {
                                                                        items: [
                                                                            IN_KW@831..834 "in" [] [Whitespace(" ")],
                                                                        ],
                                                                    },
                                                                    TsTypeParameter {
                                                                        in_modifier_token: missing (optional),
                                                                        out_modifier_token: missing (optional),
                                                                        name: TsTypeParameterName {
                                                                            ident_token: IDENT@834..835 "T" [] [],
                                                                        },
                                                                        constraint: missing (optional),
                                                                        default: missing (optional),
                                                                    },
                                                                    COMMA@835..837 "," [] [Whitespace(" ")],
                                                                    TsTypeParameter {
                                                                        in_modifier_token: missing (optional),
                                                                        out_modifier_token: missing (optional),
                                                                        name: TsTypeParameterName {
                                                                            ident_token: IDENT@837..841 "out" [] [Whitespace(" ")],
                                                                        },
                                                                        constraint: missing (optional),
                                                                        default: missing (optional),
                                                                    },
                                                                    TsTypeParameter {
                                                                        in_modifier_token: missing (optional),
                                                                        out_modifier_token: missing (optional),
                                                                        name: TsTypeParameterName {
                                                                            ident_token: IDENT@841..842 "T" [] [],
                                                                        },
                                                                        constraint: missing (optional),
                                                                        default: missing (optional),
                                                                    },
                                                                ],
                                                            },
                                                            R_ANGLE@842..843 ">" [] [],
                                                        ],
                                                    },
                                                    JsParameters {
                                                        l_paren_token: L_PAREN@843..844 "(" [] [],
                                                        items: JsParameterList [],
                                                        r_paren_token: R_PAREN@844..845 ")" [] [],
                                                    },
                                                    TsReturnTypeAnnotation {
                                                        colon_token: COLON@845..847 ":" [] [Whitespace(" ")],
                                                        ty: TsAnyType {
                                                            any_token: ANY_KW@847..851 "any" [] [Whitespace(" ")],
                                                        },
                                                    },
                                                ],
                                            },
                                        ],
                                    },
                                    R_CURLY@851..852 "}" [] [],
                                ],
                            },
                        },
                        initializer: missing (optional),
                    },
                ],
            },
            semicolon_token: SEMICOLON@852..853 ";" [] [],
        },
    ],
    eof_token: EOF@853..854 "" [Newline("\n")] [],
}

0: JS_MODULE@0..854
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_MODULE_ITEM_LIST@0..853
    0: JS_BOGUS_STATEMENT@0..39
      0: EXPORT_KW@0..8 "export" [Whitespace("\t")] [Whitespace(" ")]
      1: JS_BOGUS@8..39
        0: DEFAULT_KW@8..16 "default" [] [Whitespace(" ")]
        1: JS_BOGUS@16..39
          0: FUNCTION_KW@16..25 "function" [] [Whitespace(" ")]
          1: JS_IDENTIFIER_BINDING@25..28
            0: IDENT@25..28 "foo" [] []
          2: JS_BOGUS@28..34
            0: L_ANGLE@28..29 "<" [] []
            1: JS_BOGUS@29..33
              0: TS_BOGUS_TYPE@29..32
                0: IN_KW@29..32 "in" [] [Whitespace(" ")]
              1: TS_TYPE_PARAMETER@32..33
                0: (empty)
                1: (empty)
                2: TS_TYPE_PARAMETER_NAME@32..33
                  0: IDENT@32..33 "T" [] []
                3: (empty)
                4: (empty)
            2: R_ANGLE@33..34 ">" [] []
          3: JS_PARAMETERS@34..37
            0: L_PAREN@34..35 "(" [] []
            1: JS_PARAMETER_LIST@35..35
            2: R_PAREN@35..37 ")" [] [Whitespace(" ")]
          4: JS_FUNCTION_BODY@37..39
            0: L_CURLY@37..38 "{" [] []
            1: JS_DIRECTIVE_LIST@38..38
            2: JS_STATEMENT_LIST@38..38
            3: R_CURLY@38..39 "}" [] []
    1: JS_EXPORT@39..72
      0: EXPORT_KW@39..48 "export" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")]
      1: JS_FUNCTION_DECLARATION@48..72
        0: (empty)
        1: FUNCTION_KW@48..57 "function" [] [Whitespace(" ")]
        2: (empty)
        3: JS_IDENTIFIER_BINDING@57..60
          0: IDENT@57..60 "foo" [] []
        4: TS_TYPE_PARAMETERS@60..67
          0: L_ANGLE@60..61 "<" [] []
          1: TS_TYPE_PARAMETER_LIST@61..66
            0: TS_TYPE_PARAMETER@61..65
              0: (empty)
              1: (empty)
              2: TS_TYPE_PARAMETER_NAME@61..65
                0: IDENT@61..65 "out" [] [Whitespace(" ")]
              3: (empty)
              4: (empty)
            1: (empty)
            2: TS_TYPE_PARAMETER@65..66
              0: (empty)
              1: (empty)
              2: TS_TYPE_PARAMETER_NAME@65..66
                0: IDENT@65..66 "T" [] []
              3: (empty)
              4: (empty)
          2: R_ANGLE@66..67 ">" [] []
        5: JS_PARAMETERS@67..70
          0: L_PAREN@67..68 "(" [] []
          1: JS_PARAMETER_LIST@68..68
          2: R_PAREN@68..70 ")" [] [Whitespace(" ")]
        6: (empty)
        7: JS_FUNCTION_BODY@70..72
          0: L_CURLY@70..71 "{" [] []
          1: JS_DIRECTIVE_LIST@71..71
          2: JS_STATEMENT_LIST@71..71
          3: R_CURLY@71..72 "}" [] []
    2: JS_BOGUS_STATEMENT@72..105
      0: EXPORT_KW@72..81 "export" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")]
      1: JS_BOGUS_STATEMENT@81..105
        0: FUNCTION_KW@81..90 "function" [] [Whitespace(" ")]
        1: JS_IDENTIFIER_BINDING@90..94
          0: IDENT@90..94 "foo1" [] []
        2: JS_BOGUS@94..100
          0: L_ANGLE@94..95 "<" [] []
          1: JS_BOGUS@95..99
            0: TS_BOGUS_TYPE@95..98
              0: IN_KW@95..98 "in" [] [Whitespace(" ")]
            1: TS_TYPE_PARAMETER@98..99
              0: (empty)
              1: (empty)
              2: TS_TYPE_PARAMETER_NAME@98..99
                0: IDENT@98..99 "T" [] []
              3: (empty)
              4: (empty)
          2: R_ANGLE@99..100 ">" [] []
        3: JS_PARAMETERS@100..103
          0: L_PAREN@100..101 "(" [] []
          1: JS_PARAMETER_LIST@101..101
          2: R_PAREN@101..103 ")" [] [Whitespace(" ")]
        4: JS_FUNCTION_BODY@103..105
          0: L_CURLY@103..104 "{" [] []
          1: JS_DIRECTIVE_LIST@104..104
          2: JS_STATEMENT_LIST@104..104
          3: R_CURLY@104..105 "}" [] []
    3: JS_EXPORT@105..139
      0: EXPORT_KW@105..114 "export" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")]
      1: JS_FUNCTION_DECLARATION@114..139
        0: (empty)
        1: FUNCTION_KW@114..123 "function" [] [Whitespace(" ")]
        2: (empty)
        3: JS_IDENTIFIER_BINDING@123..127
          0: IDENT@123..127 "foo2" [] []
        4: TS_TYPE_PARAMETERS@127..134
          0: L_ANGLE@127..128 "<" [] []
          1: TS_TYPE_PARAMETER_LIST@128..133
            0: TS_TYPE_PARAMETER@128..132
              0: (empty)
              1: (empty)
              2: TS_TYPE_PARAMETER_NAME@128..132
                0: IDENT@128..132 "out" [] [Whitespace(" ")]
              3: (empty)
              4: (empty)
            1: (empty)
            2: TS_TYPE_PARAMETER@132..133
              0: (empty)
              1: (empty)
              2: TS_TYPE_PARAMETER_NAME@132..133
                0: IDENT@132..133 "T" [] []
              3: (empty)
              4: (empty)
          2: R_ANGLE@133..134 ">" [] []
        5: JS_PARAMETERS@134..137
          0: L_PAREN@134..135 "(" [] []
          1: JS_PARAMETER_LIST@135..135
          2: R_PAREN@135..137 ")" [] [Whitespace(" ")]
        6: (empty)
        7: JS_FUNCTION_BODY@137..139
          0: L_CURLY@137..138 "{" [] []
          1: JS_DIRECTIVE_LIST@138..138
          2: JS_STATEMENT_LIST@138..138
          3: R_CURLY@138..139 "}" [] []
    4: JS_VARIABLE_STATEMENT@139..159
      0: JS_VARIABLE_DECLARATION@139..159
        0: LET_KW@139..145 "let" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@145..159
          0: JS_VARIABLE_DECLARATOR@145..159
            0: JS_IDENTIFIER_BINDING@145..148
              0: IDENT@145..148 "foo" [] []
            1: TS_TYPE_ANNOTATION@148..159
              0: COLON@148..150 ":" [] [Whitespace(" ")]
              1: TS_REFERENCE_TYPE@150..159
                0: JS_REFERENCE_IDENTIFIER@150..153
                  0: IDENT@150..153 "Foo" [] []
                1: TS_TYPE_ARGUMENTS@153..159
                  0: L_ANGLE@153..154 "<" [] []
                  1: TS_TYPE_ARGUMENT_LIST@154..158
                    0: TS_REFERENCE_TYPE@154..157
                      0: JS_REFERENCE_IDENTIFIER@154..157
                        0: IDENT@154..157 "in" [] [Whitespace(" ")]
                      1: (empty)
                    1: (empty)
                    2: TS_REFERENCE_TYPE@157..158
                      0: JS_REFERENCE_IDENTIFIER@157..158
                        0: IDENT@157..158 "T" [] []
                      1: (empty)
                  2: R_ANGLE@158..159 ">" [] []
            2: (empty)
      1: (empty)
    5: JS_VARIABLE_STATEMENT@159..180
      0: JS_VARIABLE_DECLARATION@159..180
        0: LET_KW@159..165 "let" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@165..180
          0: JS_VARIABLE_DECLARATOR@165..180
            0: JS_IDENTIFIER_BINDING@165..168
              0: IDENT@165..168 "foo" [] []
            1: TS_TYPE_ANNOTATION@168..180
              0: COLON@168..170 ":" [] [Whitespace(" ")]
              1: TS_REFERENCE_TYPE@170..180
                0: JS_REFERENCE_IDENTIFIER@170..173
                  0: IDENT@170..173 "Foo" [] []
                1: TS_TYPE_ARGUMENTS@173..180
                  0: L_ANGLE@173..174 "<" [] []
                  1: TS_TYPE_ARGUMENT_LIST@174..179
                    0: TS_REFERENCE_TYPE@174..178
                      0: JS_REFERENCE_IDENTIFIER@174..178
                        0: IDENT@174..178 "out" [] [Whitespace(" ")]
                      1: (empty)
                    1: (empty)
                    2: TS_REFERENCE_TYPE@178..179
                      0: JS_REFERENCE_IDENTIFIER@178..179
                        0: IDENT@178..179 "T" [] []
                      1: (empty)
                  2: R_ANGLE@179..180 ">" [] []
            2: (empty)
      1: (empty)
    6: JS_BOGUS_STATEMENT@180..210
      0: DECLARE_KW@180..190 "declare" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")]
      1: JS_BOGUS_STATEMENT@190..210
        0: FUNCTION_KW@190..199 "function" [] [Whitespace(" ")]
        1: JS_IDENTIFIER_BINDING@199..202
          0: IDENT@199..202 "foo" [] []
        2: JS_BOGUS@202..208
          0: L_ANGLE@202..203 "<" [] []
          1: JS_BOGUS@203..207
            0: TS_BOGUS_TYPE@203..206
              0: IN_KW@203..206 "in" [] [Whitespace(" ")]
            1: TS_TYPE_PARAMETER@206..207
              0: (empty)
              1: (empty)
              2: TS_TYPE_PARAMETER_NAME@206..207
                0: IDENT@206..207 "T" [] []
              3: (empty)
              4: (empty)
          2: R_ANGLE@207..208 ">" [] []
        3: JS_PARAMETERS@208..210
          0: L_PAREN@208..209 "(" [] []
          1: JS_PARAMETER_LIST@209..209
          2: R_PAREN@209..210 ")" [] []
    7: TS_DECLARE_STATEMENT@210..241
      0: DECLARE_KW@210..220 "declare" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")]
      1: TS_DECLARE_FUNCTION_DECLARATION@220..241
        0: (empty)
        1: FUNCTION_KW@220..229 "function" [] [Whitespace(" ")]
        2: JS_IDENTIFIER_BINDING@229..232
          0: IDENT@229..232 "foo" [] []
        3: TS_TYPE_PARAMETERS@232..239
          0: L_ANGLE@232..233 "<" [] []
          1: TS_TYPE_PARAMETER_LIST@233..238
            0: TS_TYPE_PARAMETER@233..237
              0: (empty)
              1: (empty)
              2: TS_TYPE_PARAMETER_NAME@233..237
                0: IDENT@233..237 "out" [] [Whitespace(" ")]
              3: (empty)
              4: (empty)
            1: (empty)
            2: TS_TYPE_PARAMETER@237..238
              0: (empty)
              1: (empty)
              2: TS_TYPE_PARAMETER_NAME@237..238
                0: IDENT@237..238 "T" [] []
              3: (empty)
              4: (empty)
          2: R_ANGLE@238..239 ">" [] []
        4: JS_PARAMETERS@239..241
          0: L_PAREN@239..240 "(" [] []
          1: JS_PARAMETER_LIST@240..240
          2: R_PAREN@240..241 ")" [] []
        5: (empty)
        6: (empty)
    8: TS_DECLARE_STATEMENT@241..269
      0: DECLARE_KW@241..251 "declare" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")]
      1: JS_VARIABLE_DECLARATION_CLAUSE@251..269
        0: JS_VARIABLE_DECLARATION@251..269
          0: LET_KW@251..255 "let" [] [Whitespace(" ")]
          1: JS_VARIABLE_DECLARATOR_LIST@255..269
            0: JS_VARIABLE_DECLARATOR@255..269
              0: JS_IDENTIFIER_BINDING@255..258
                0: IDENT@255..258 "foo" [] []
              1: TS_TYPE_ANNOTATION@258..269
                0: COLON@258..260 ":" [] [Whitespace(" ")]
                1: TS_REFERENCE_TYPE@260..269
                  0: JS_REFERENCE_IDENTIFIER@260..263
                    0: IDENT@260..263 "Foo" [] []
                  1: TS_TYPE_ARGUMENTS@263..269
                    0: L_ANGLE@263..264 "<" [] []
                    1: TS_TYPE_ARGUMENT_LIST@264..268
                      0: TS_REFERENCE_TYPE@264..267
                        0: JS_REFERENCE_IDENTIFIER@264..267
                          0: IDENT@264..267 "in" [] [Whitespace(" ")]
                        1: (empty)
                      1: (empty)
                      2: TS_REFERENCE_TYPE@267..268
                        0: JS_REFERENCE_IDENTIFIER@267..268
                          0: IDENT@267..268 "T" [] []
                        1: (empty)
                    2: R_ANGLE@268..269 ">" [] []
              2: (empty)
        1: (empty)
    9: TS_DECLARE_STATEMENT@269..298
      0: DECLARE_KW@269..279 "declare" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")]
      1: JS_VARIABLE_DECLARATION_CLAUSE@279..298
        0: JS_VARIABLE_DECLARATION@279..298
          0: LET_KW@279..283 "let" [] [Whitespace(" ")]
          1: JS_VARIABLE_DECLARATOR_LIST@283..298
            0: JS_VARIABLE_DECLARATOR@283..298
              0: JS_IDENTIFIER_BINDING@283..286
                0: IDENT@283..286 "foo" [] []
              1: TS_TYPE_ANNOTATION@286..298
                0: COLON@286..288 ":" [] [Whitespace(" ")]
                1: TS_REFERENCE_TYPE@288..298
                  0: JS_REFERENCE_IDENTIFIER@288..291
                    0: IDENT@288..291 "Foo" [] []
                  1: TS_TYPE_ARGUMENTS@291..298
                    0: L_ANGLE@291..292 "<" [] []
                    1: TS_TYPE_ARGUMENT_LIST@292..297
                      0: TS_REFERENCE_TYPE@292..296
                        0: JS_REFERENCE_IDENTIFIER@292..296
                          0: IDENT@292..296 "out" [] [Whitespace(" ")]
                        1: (empty)
                      1: (empty)
                      2: TS_REFERENCE_TYPE@296..297
                        0: JS_REFERENCE_IDENTIFIER@296..297
                          0: IDENT@296..297 "T" [] []
                        1: (empty)
                    2: R_ANGLE@297..298 ">" [] []
              2: (empty)
        1: (empty)
    10: JS_EXPRESSION_STATEMENT@298..321
      0: JS_ASSIGNMENT_EXPRESSION@298..321
        0: JS_IDENTIFIER_ASSIGNMENT@298..304
          0: IDENT@298..304 "Foo" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")]
        1: EQ@304..306 "=" [] [Whitespace(" ")]
        2: JS_CLASS_EXPRESSION@306..321
          0: CLASS_KW@306..312 "class" [] [Whitespace(" ")]
          1: (empty)
          2: TS_TYPE_PARAMETERS@312..319
            0: L_ANGLE@312..313 "<" [] []
            1: TS_TYPE_PARAMETER_LIST@313..317
              0: TS_TYPE_PARAMETER@313..317
                0: IN_KW@313..316 "in" [] [Whitespace(" ")]
                1: (empty)
                2: TS_TYPE_PARAMETER_NAME@316..317
                  0: IDENT@316..317 "T" [] []
                3: (empty)
                4: (empty)
            2: R_ANGLE@317..319 ">" [] [Whitespace(" ")]
          3: (empty)
          4: (empty)
          5: L_CURLY@319..320 "{" [] []
          6: JS_CLASS_MEMBER_LIST@320..320
          7: R_CURLY@320..321 "}" [] []
      1: (empty)
    11: JS_EXPRESSION_STATEMENT@321..345
      0: JS_ASSIGNMENT_EXPRESSION@321..345
        0: JS_IDENTIFIER_ASSIGNMENT@321..327
          0: IDENT@321..327 "Foo" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")]
        1: EQ@327..329 "=" [] [Whitespace(" ")]
        2: JS_CLASS_EXPRESSION@329..345
          0: CLASS_KW@329..335 "class" [] [Whitespace(" ")]
          1: (empty)
          2: TS_TYPE_PARAMETERS@335..343
            0: L_ANGLE@335..336 "<" [] []
            1: TS_TYPE_PARAMETER_LIST@336..341
              0: TS_TYPE_PARAMETER@336..341
                0: (empty)
                1: OUT_KW@336..340 "out" [] [Whitespace(" ")]
                2: TS_TYPE_PARAMETER_NAME@340..341
                  0: IDENT@340..341 "T" [] []
                3: (empty)
                4: (empty)
            2: R_ANGLE@341..343 ">" [] [Whitespace(" ")]
          3: (empty)
          4: (empty)
          5: L_CURLY@343..344 "{" [] []
          6: JS_CLASS_MEMBER_LIST@344..344
          7: R_CURLY@344..345 "}" [] []
      1: (empty)
    12: JS_EXPRESSION_STATEMENT@345..373
      0: JS_ASSIGNMENT_EXPRESSION@345..373
        0: JS_IDENTIFIER_ASSIGNMENT@345..351
          0: IDENT@345..351 "foo" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")]
        1: EQ@351..353 "=" [] [Whitespace(" ")]
        2: JS_BOGUS_EXPRESSION@353..373
          0: FUNCTION_KW@353..362 "function" [] [Whitespace(" ")]
          1: JS_BOGUS@362..368
            0: L_ANGLE@362..363 "<" [] []
            1: JS_BOGUS@363..367
              0: TS_BOGUS_TYPE@363..366
                0: IN_KW@363..366 "in" [] [Whitespace(" ")]
              1: TS_TYPE_PARAMETER@366..367
                0: (empty)
                1: (empty)
                2: TS_TYPE_PARAMETER_NAME@366..367
                  0: IDENT@366..367 "T" [] []
                3: (empty)
                4: (empty)
            2: R_ANGLE@367..368 ">" [] []
          2: JS_PARAMETERS@368..371
            0: L_PAREN@368..369 "(" [] []
            1: JS_PARAMETER_LIST@369..369
            2: R_PAREN@369..371 ")" [] [Whitespace(" ")]
          3: JS_FUNCTION_BODY@371..373
            0: L_CURLY@371..372 "{" [] []
            1: JS_DIRECTIVE_LIST@372..372
            2: JS_STATEMENT_LIST@372..372
            3: R_CURLY@372..373 "}" [] []
      1: (empty)
    13: JS_EXPRESSION_STATEMENT@373..402
      0: JS_ASSIGNMENT_EXPRESSION@373..402
        0: JS_IDENTIFIER_ASSIGNMENT@373..379
          0: IDENT@373..379 "foo" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")]
        1: EQ@379..381 "=" [] [Whitespace(" ")]
        2: JS_FUNCTION_EXPRESSION@381..402
          0: (empty)
          1: FUNCTION_KW@381..390 "function" [] [Whitespace(" ")]
          2: (empty)
          3: (empty)
          4: TS_TYPE_PARAMETERS@390..397
            0: L_ANGLE@390..391 "<" [] []
            1: TS_TYPE_PARAMETER_LIST@391..396
              0: TS_TYPE_PARAMETER@391..395
                0: (empty)
                1: (empty)
                2: TS_TYPE_PARAMETER_NAME@391..395
                  0: IDENT@391..395 "out" [] [Whitespace(" ")]
                3: (empty)
                4: (empty)
              1: (empty)
              2: TS_TYPE_PARAMETER@395..396
                0: (empty)
                1: (empty)
                2: TS_TYPE_PARAMETER_NAME@395..396
                  0: IDENT@395..396 "T" [] []
                3: (empty)
                4: (empty)
            2: R_ANGLE@396..397 ">" [] []
          5: JS_PARAMETERS@397..400
            0: L_PAREN@397..398 "(" [] []
            1: JS_PARAMETER_LIST@398..398
            2: R_PAREN@398..400 ")" [] [Whitespace(" ")]
          6: (empty)
          7: JS_FUNCTION_BODY@400..402
            0: L_CURLY@400..401 "{" [] []
            1: JS_DIRECTIVE_LIST@401..401
            2: JS_STATEMENT_LIST@401..401
            3: R_CURLY@401..402 "}" [] []
      1: (empty)
    14: JS_CLASS_DECLARATION@402..435
      0: (empty)
      1: CLASS_KW@402..410 "class" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")]
      2: JS_IDENTIFIER_BINDING@410..414
        0: IDENT@410..414 "Foo" [] [Whitespace(" ")]
      3: (empty)
      4: (empty)
      5: (empty)
      6: L_CURLY@414..416 "{" [] [Whitespace(" ")]
      7: JS_CLASS_MEMBER_LIST@416..434
        0: JS_BOGUS_MEMBER@416..434
          0: JS_METHOD_MODIFIER_LIST@416..416
          1: JS_LITERAL_MEMBER_NAME@416..419
            0: IDENT@416..419 "foo" [] []
          2: JS_BOGUS@419..425
            0: L_ANGLE@419..420 "<" [] []
            1: JS_BOGUS@420..424
              0: TS_BOGUS_TYPE@420..423
                0: IN_KW@420..423 "in" [] [Whitespace(" ")]
              1: TS_TYPE_PARAMETER@423..424
                0: (empty)
                1: (empty)
                2: TS_TYPE_PARAMETER_NAME@423..424
                  0: IDENT@423..424 "T" [] []
                3: (empty)
                4: (empty)
            2: R_ANGLE@424..425 ">" [] []
          3: JS_PARAMETERS@425..427
            0: L_PAREN@425..426 "(" [] []
            1: JS_PARAMETER_LIST@426..426
            2: R_PAREN@426..427 ")" [] []
          4: TS_RETURN_TYPE_ANNOTATION@427..431
            0: COLON@427..429 ":" [] [Whitespace(" ")]
            1: TS_REFERENCE_TYPE@429..431
              0: JS_REFERENCE_IDENTIFIER@429..431
                0: IDENT@429..431 "T" [] [Whitespace(" ")]
              1: (empty)
          5: JS_FUNCTION_BODY@431..434
            0: L_CURLY@431..432 "{" [] []
            1: JS_DIRECTIVE_LIST@432..432
            2: JS_STATEMENT_LIST@432..432
            3: R_CURLY@432..434 "}" [] [Whitespace(" ")]
      8: R_CURLY@434..435 "}" [] []
    15: JS_CLASS_DECLARATION@435..469
      0: (empty)
      1: CLASS_KW@435..443 "class" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")]
      2: JS_IDENTIFIER_BINDING@443..447
        0: IDENT@443..447 "Foo" [] [Whitespace(" ")]
      3: (empty)
      4: (empty)
      5: (empty)
      6: L_CURLY@447..449 "{" [] [Whitespace(" ")]
      7: JS_CLASS_MEMBER_LIST@449..468
        0: JS_METHOD_CLASS_MEMBER@449..468
          0: JS_METHOD_MODIFIER_LIST@449..449
          1: (empty)
          2: (empty)
          3: JS_LITERAL_MEMBER_NAME@449..452
            0: IDENT@449..452 "foo" [] []
          4: (empty)
          5: TS_TYPE_PARAMETERS@452..459
            0: L_ANGLE@452..453 "<" [] []
            1: TS_TYPE_PARAMETER_LIST@453..458
              0: TS_TYPE_PARAMETER@453..457
                0: (empty)
                1: (empty)
                2: TS_TYPE_PARAMETER_NAME@453..457
                  0: IDENT@453..457 "out" [] [Whitespace(" ")]
                3: (empty)
                4: (empty)
              1: (empty)
              2: TS_TYPE_PARAMETER@457..458
                0: (empty)
                1: (empty)
                2: TS_TYPE_PARAMETER_NAME@457..458
                  0: IDENT@457..458 "T" [] []
                3: (empty)
                4: (empty)
            2: R_ANGLE@458..459 ">" [] []
          6: JS_PARAMETERS@459..461
            0: L_PAREN@459..460 "(" [] []
            1: JS_PARAMETER_LIST@460..460
            2: R_PAREN@460..461 ")" [] []
          7: TS_RETURN_TYPE_ANNOTATION@461..465
            0: COLON@461..463 ":" [] [Whitespace(" ")]
            1: TS_REFERENCE_TYPE@463..465
              0: JS_REFERENCE_IDENTIFIER@463..465
                0: IDENT@463..465 "T" [] [Whitespace(" ")]
              1: (empty)
          8: JS_FUNCTION_BODY@465..468
            0: L_CURLY@465..466 "{" [] []
            1: JS_DIRECTIVE_LIST@466..466
            2: JS_STATEMENT_LIST@466..466
            3: R_CURLY@466..468 "}" [] [Whitespace(" ")]
      8: R_CURLY@468..469 "}" [] []
    16: JS_EXPRESSION_STATEMENT@469..499
      0: JS_ASSIGNMENT_EXPRESSION@469..498
        0: JS_IDENTIFIER_ASSIGNMENT@469..475
          0: IDENT@469..475 "foo" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")]
        1: EQ@475..477 "=" [] [Whitespace(" ")]
        2: JS_OBJECT_EXPRESSION@477..498
          0: L_CURLY@477..479 "{" [] [Whitespace(" ")]
          1: JS_OBJECT_MEMBER_LIST@479..497
            0: JS_BOGUS_MEMBER@479..497
              0: JS_LITERAL_MEMBER_NAME@479..482
                0: IDENT@479..482 "foo" [] []
              1: JS_BOGUS@482..488
                0: L_ANGLE@482..483 "<" [] []
                1: JS_BOGUS@483..487
                  0: TS_BOGUS_TYPE@483..486
                    0: IN_KW@483..486 "in" [] [Whitespace(" ")]
                  1: TS_TYPE_PARAMETER@486..487
                    0: (empty)
                    1: (empty)
                    2: TS_TYPE_PARAMETER_NAME@486..487
                      0: IDENT@486..487 "T" [] []
                    3: (empty)
                    4: (empty)
                2: R_ANGLE@487..488 ">" [] []
              2: JS_PARAMETERS@488..490
                0: L_PAREN@488..489 "(" [] []
                1: JS_PARAMETER_LIST@489..489
                2: R_PAREN@489..490 ")" [] []
              3: TS_RETURN_TYPE_ANNOTATION@490..494
                0: COLON@490..492 ":" [] [Whitespace(" ")]
                1: TS_REFERENCE_TYPE@492..494
                  0: JS_REFERENCE_IDENTIFIER@492..494
                    0: IDENT@492..494 "T" [] [Whitespace(" ")]
                  1: (empty)
              4: JS_FUNCTION_BODY@494..497
                0: L_CURLY@494..495 "{" [] []
                1: JS_DIRECTIVE_LIST@495..495
                2: JS_STATEMENT_LIST@495..495
                3: R_CURLY@495..497 "}" [] [Whitespace(" ")]
          2: R_CURLY@497..498 "}" [] []
      1: SEMICOLON@498..499 ";" [] []
    17: JS_EXPRESSION_STATEMENT@499..530
      0: JS_ASSIGNMENT_EXPRESSION@499..529
        0: JS_IDENTIFIER_ASSIGNMENT@499..505
          0: IDENT@499..505 "foo" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")]
        1: EQ@505..507 "=" [] [Whitespace(" ")]
        2: JS_OBJECT_EXPRESSION@507..529
          0: L_CURLY@507..509 "{" [] [Whitespace(" ")]
          1: JS_OBJECT_MEMBER_LIST@509..528
            0: JS_METHOD_OBJECT_MEMBER@509..528
              0: (empty)
              1: (empty)
              2: JS_LITERAL_MEMBER_NAME@509..512
                0: IDENT@509..512 "foo" [] []
              3: TS_TYPE_PARAMETERS@512..519
                0: L_ANGLE@512..513 "<" [] []
                1: TS_TYPE_PARAMETER_LIST@513..518
                  0: TS_TYPE_PARAMETER@513..517
                    0: (empty)
                    1: (empty)
                    2: TS_TYPE_PARAMETER_NAME@513..517
                      0: IDENT@513..517 "out" [] [Whitespace(" ")]
                    3: (empty)
                    4: (empty)
                  1: (empty)
                  2: TS_TYPE_PARAMETER@517..518
                    0: (empty)
                    1: (empty)
                    2: TS_TYPE_PARAMETER_NAME@517..518
                      0: IDENT@517..518 "T" [] []
                    3: (empty)
                    4: (empty)
                2: R_ANGLE@518..519 ">" [] []
              4: JS_PARAMETERS@519..521
                0: L_PAREN@519..520 "(" [] []
                1: JS_PARAMETER_LIST@520..520
                2: R_PAREN@520..521 ")" [] []
              5: TS_RETURN_TYPE_ANNOTATION@521..525
                0: COLON@521..523 ":" [] [Whitespace(" ")]
                1: TS_REFERENCE_TYPE@523..525
                  0: JS_REFERENCE_IDENTIFIER@523..525
                    0: IDENT@523..525 "T" [] [Whitespace(" ")]
                  1: (empty)
              6: JS_FUNCTION_BODY@525..528
                0: L_CURLY@525..526 "{" [] []
                1: JS_DIRECTIVE_LIST@526..526
                2: JS_STATEMENT_LIST@526..526
                3: R_CURLY@526..528 "}" [] [Whitespace(" ")]
          2: R_CURLY@528..529 "}" [] []
      1: SEMICOLON@529..530 ";" [] []
    18: JS_EXPRESSION_STATEMENT@530..541
      0: JS_BINARY_EXPRESSION@530..541
        0: TS_TYPE_ASSERTION_EXPRESSION@530..537
          0: L_ANGLE@530..533 "<" [Newline("\n"), Whitespace("\t")] []
          1: TS_REFERENCE_TYPE@533..536
            0: JS_REFERENCE_IDENTIFIER@533..536
              0: IDENT@533..536 "in" [] [Whitespace(" ")]
            1: (empty)
          2: (empty)
          3: JS_IDENTIFIER_EXPRESSION@536..537
            0: JS_REFERENCE_IDENTIFIER@536..537
              0: IDENT@536..537 "T" [] []
        1: R_ANGLE@537..538 ">" [] []
        2: JS_PARENTHESIZED_EXPRESSION@538..541
          0: L_PAREN@538..539 "(" [] []
          1: (empty)
          2: R_PAREN@539..541 ")" [] [Whitespace(" ")]
      1: (empty)
    19: JS_BOGUS_STATEMENT@541..544
      0: FAT_ARROW@541..544 "=>" [] [Whitespace(" ")]
    20: JS_BLOCK_STATEMENT@544..546
      0: L_CURLY@544..545 "{" [] []
      1: JS_STATEMENT_LIST@545..545
      2: R_CURLY@545..546 "}" [] []
    21: JS_EMPTY_STATEMENT@546..547
      0: SEMICOLON@546..547 ";" [] []
    22: JS_EXPRESSION_STATEMENT@547..565
      0: JS_ARROW_FUNCTION_EXPRESSION@547..564
        0: (empty)
        1: TS_TYPE_PARAMETERS@547..556
          0: L_ANGLE@547..550 "<" [Newline("\n"), Whitespace("\t")] []
          1: TS_TYPE_PARAMETER_LIST@550..555
            0: TS_TYPE_PARAMETER@550..554
              0: (empty)
              1: (empty)
              2: TS_TYPE_PARAMETER_NAME@550..554
                0: IDENT@550..554 "out" [] [Whitespace(" ")]
              3: (empty)
              4: (empty)
            1: (empty)
            2: TS_TYPE_PARAMETER@554..555
              0: (empty)
              1: (empty)
              2: TS_TYPE_PARAMETER_NAME@554..555
                0: IDENT@554..555 "T" [] []
              3: (empty)
              4: (empty)
          2: R_ANGLE@555..556 ">" [] []
        2: JS_PARAMETERS@556..559
          0: L_PAREN@556..557 "(" [] []
          1: JS_PARAMETER_LIST@557..557
          2: R_PAREN@557..559 ")" [] [Whitespace(" ")]
        3: (empty)
        4: FAT_ARROW@559..562 "=>" [] [Whitespace(" ")]
        5: JS_FUNCTION_BODY@562..564
          0: L_CURLY@562..563 "{" [] []
          1: JS_DIRECTIVE_LIST@563..563
          2: JS_STATEMENT_LIST@563..563
          3: R_CURLY@563..564 "}" [] []
      1: SEMICOLON@564..565 ";" [] []
    23: JS_EXPRESSION_STATEMENT@565..578
      0: JS_SEQUENCE_EXPRESSION@565..578
        0: TS_TYPE_ASSERTION_EXPRESSION@565..572
          0: L_ANGLE@565..568 "<" [Newline("\n"), Whitespace("\t")] []
          1: TS_REFERENCE_TYPE@568..571
            0: JS_REFERENCE_IDENTIFIER@568..571
              0: IDENT@568..571 "in" [] [Whitespace(" ")]
            1: (empty)
          2: (empty)
          3: JS_IDENTIFIER_EXPRESSION@571..572
            0: JS_REFERENCE_IDENTIFIER@571..572
              0: IDENT@571..572 "T" [] []
        1: COMMA@572..574 "," [] [Whitespace(" ")]
        2: JS_IDENTIFIER_EXPRESSION@574..578
          0: JS_REFERENCE_IDENTIFIER@574..578
            0: IDENT@574..578 "out" [] [Whitespace(" ")]
      1: (empty)
    24: JS_EXPRESSION_STATEMENT@578..583
      0: JS_BINARY_EXPRESSION@578..583
        0: JS_IDENTIFIER_EXPRESSION@578..579
          0: JS_REFERENCE_IDENTIFIER@578..579
            0: IDENT@578..579 "T" [] []
        1: R_ANGLE@579..580 ">" [] []
        2: JS_PARENTHESIZED_EXPRESSION@580..583
          0: L_PAREN@580..581 "(" [] []
          1: (empty)
          2: R_PAREN@581..583 ")" [] [Whitespace(" ")]
      1: (empty)
    25: JS_BOGUS_STATEMENT@583..586
      0: FAT_ARROW@583..586 "=>" [] [Whitespace(" ")]
    26: JS_BLOCK_STATEMENT@586..588
      0: L_CURLY@586..587 "{" [] []
      1: JS_STATEMENT_LIST@587..587
      2: R_CURLY@587..588 "}" [] []
    27: JS_EMPTY_STATEMENT@588..589
      0: SEMICOLON@588..589 ";" [] []
    28: JS_VARIABLE_STATEMENT@589..613
      0: JS_VARIABLE_DECLARATION@589..612
        0: LET_KW@589..595 "let" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@595..612
          0: JS_VARIABLE_DECLARATOR@595..612
            0: JS_IDENTIFIER_BINDING@595..596
              0: IDENT@595..596 "x" [] []
            1: TS_TYPE_ANNOTATION@596..612
              0: COLON@596..598 ":" [] [Whitespace(" ")]
              1: TS_BOGUS_TYPE@598..612
                0: JS_BOGUS@598..604
                  0: L_ANGLE@598..599 "<" [] []
                  1: JS_BOGUS@599..603
                    0: TS_BOGUS_TYPE@599..602
                      0: IN_KW@599..602 "in" [] [Whitespace(" ")]
                    1: TS_TYPE_PARAMETER@602..603
                      0: (empty)
                      1: (empty)
                      2: TS_TYPE_PARAMETER_NAME@602..603
                        0: IDENT@602..603 "T" [] []
                      3: (empty)
                      4: (empty)
                  2: R_ANGLE@603..604 ">" [] []
                1: JS_PARAMETERS@604..607
                  0: L_PAREN@604..605 "(" [] []
                  1: JS_PARAMETER_LIST@605..605
                  2: R_PAREN@605..607 ")" [] [Whitespace(" ")]
                2: FAT_ARROW@607..610 "=>" [] [Whitespace(" ")]
                3: TS_OBJECT_TYPE@610..612
                  0: L_CURLY@610..611 "{" [] []
                  1: TS_TYPE_MEMBER_LIST@611..611
                  2: R_CURLY@611..612 "}" [] []
            2: (empty)
      1: SEMICOLON@612..613 ";" [] []
    29: JS_VARIABLE_STATEMENT@613..638
      0: JS_VARIABLE_DECLARATION@613..637
        0: LET_KW@613..619 "let" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@619..637
          0: JS_VARIABLE_DECLARATOR@619..637
            0: JS_IDENTIFIER_BINDING@619..620
              0: IDENT@619..620 "x" [] []
            1: TS_TYPE_ANNOTATION@620..637
              0: COLON@620..622 ":" [] [Whitespace(" ")]
              1: TS_FUNCTION_TYPE@622..637
                0: TS_TYPE_PARAMETERS@622..629
                  0: L_ANGLE@622..623 "<" [] []
                  1: TS_TYPE_PARAMETER_LIST@623..628
                    0: TS_TYPE_PARAMETER@623..627
                      0: (empty)
                      1: (empty)
                      2: TS_TYPE_PARAMETER_NAME@623..627
                        0: IDENT@623..627 "out" [] [Whitespace(" ")]
                      3: (empty)
                      4: (empty)
                    1: (empty)
                    2: TS_TYPE_PARAMETER@627..628
                      0: (empty)
                      1: (empty)
                      2: TS_TYPE_PARAMETER_NAME@627..628
                        0: IDENT@627..628 "T" [] []
                      3: (empty)
                      4: (empty)
                  2: R_ANGLE@628..629 ">" [] []
                1: JS_PARAMETERS@629..632
                  0: L_PAREN@629..630 "(" [] []
                  1: JS_PARAMETER_LIST@630..630
                  2: R_PAREN@630..632 ")" [] [Whitespace(" ")]
                2: FAT_ARROW@632..635 "=>" [] [Whitespace(" ")]
                3: TS_OBJECT_TYPE@635..637
                  0: L_CURLY@635..636 "{" [] []
                  1: TS_TYPE_MEMBER_LIST@636..636
                  2: R_CURLY@636..637 "}" [] []
            2: (empty)
      1: SEMICOLON@637..638 ";" [] []
    30: JS_VARIABLE_STATEMENT@638..669
      0: JS_VARIABLE_DECLARATION@638..668
        0: LET_KW@638..644 "let" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@644..668
          0: JS_VARIABLE_DECLARATOR@644..668
            0: JS_IDENTIFIER_BINDING@644..645
              0: IDENT@644..645 "x" [] []
            1: TS_TYPE_ANNOTATION@645..668
              0: COLON@645..647 ":" [] [Whitespace(" ")]
              1: TS_BOGUS_TYPE@647..668
                0: JS_BOGUS@647..660
                  0: L_ANGLE@647..648 "<" [] []
                  1: JS_BOGUS@648..659
                    0: TS_BOGUS_TYPE@648..651
                      0: IN_KW@648..651 "in" [] [Whitespace(" ")]
                    1: TS_TYPE_PARAMETER@651..652
                      0: (empty)
                      1: (empty)
                      2: TS_TYPE_PARAMETER_NAME@651..652
                        0: IDENT@651..652 "T" [] []
                      3: (empty)
                      4: (empty)
                    2: COMMA@652..654 "," [] [Whitespace(" ")]
                    3: TS_TYPE_PARAMETER@654..658
                      0: (empty)
                      1: (empty)
                      2: TS_TYPE_PARAMETER_NAME@654..658
                        0: IDENT@654..658 "out" [] [Whitespace(" ")]
                      3: (empty)
                      4: (empty)
                    4: TS_TYPE_PARAMETER@658..659
                      0: (empty)
                      1: (empty)
                      2: TS_TYPE_PARAMETER_NAME@658..659
                        0: IDENT@658..659 "T" [] []
                      3: (empty)
                      4: (empty)
                  2: R_ANGLE@659..660 ">" [] []
                1: JS_PARAMETERS@660..663
                  0: L_PAREN@660..661 "(" [] []
                  1: JS_PARAMETER_LIST@661..661
                  2: R_PAREN@661..663 ")" [] [Whitespace(" ")]
                2: FAT_ARROW@663..666 "=>" [] [Whitespace(" ")]
                3: TS_OBJECT_TYPE@666..668
                  0: L_CURLY@666..667 "{" [] []
                  1: TS_TYPE_MEMBER_LIST@667..667
                  2: R_CURLY@667..668 "}" [] []
            2: (empty)
      1: SEMICOLON@668..669 ";" [] []
    31: JS_VARIABLE_STATEMENT@669..697
      0: JS_VARIABLE_DECLARATION@669..696
        0: LET_KW@669..675 "let" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@675..696
          0: JS_VARIABLE_DECLARATOR@675..696
            0: JS_IDENTIFIER_BINDING@675..676
              0: IDENT@675..676 "x" [] []
            1: TS_TYPE_ANNOTATION@676..696
              0: COLON@676..678 ":" [] [Whitespace(" ")]
              1: TS_BOGUS_TYPE@678..696
                0: NEW_KW@678..682 "new" [] [Whitespace(" ")]
                1: JS_BOGUS@682..688
                  0: L_ANGLE@682..683 "<" [] []
                  1: JS_BOGUS@683..687
                    0: TS_BOGUS_TYPE@683..686
                      0: IN_KW@683..686 "in" [] [Whitespace(" ")]
                    1: TS_TYPE_PARAMETER@686..687
                      0: (empty)
                      1: (empty)
                      2: TS_TYPE_PARAMETER_NAME@686..687
                        0: IDENT@686..687 "T" [] []
                      3: (empty)
                      4: (empty)
                  2: R_ANGLE@687..688 ">" [] []
                2: JS_PARAMETERS@688..691
                  0: L_PAREN@688..689 "(" [] []
                  1: JS_PARAMETER_LIST@689..689
                  2: R_PAREN@689..691 ")" [] [Whitespace(" ")]
                3: FAT_ARROW@691..694 "=>" [] [Whitespace(" ")]
                4: TS_OBJECT_TYPE@694..696
                  0: L_CURLY@694..695 "{" [] []
                  1: TS_TYPE_MEMBER_LIST@695..695
                  2: R_CURLY@695..696 "}" [] []
            2: (empty)
      1: SEMICOLON@696..697 ";" [] []
    32: JS_VARIABLE_STATEMENT@697..726
      0: JS_VARIABLE_DECLARATION@697..725
        0: LET_KW@697..703 "let" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@703..725
          0: JS_VARIABLE_DECLARATOR@703..725
            0: JS_IDENTIFIER_BINDING@703..704
              0: IDENT@703..704 "x" [] []
            1: TS_TYPE_ANNOTATION@704..725
              0: COLON@704..706 ":" [] [Whitespace(" ")]
              1: TS_CONSTRUCTOR_TYPE@706..725
                0: (empty)
                1: NEW_KW@706..710 "new" [] [Whitespace(" ")]
                2: TS_TYPE_PARAMETERS@710..717
                  0: L_ANGLE@710..711 "<" [] []
                  1: TS_TYPE_PARAMETER_LIST@711..716
                    0: TS_TYPE_PARAMETER@711..715
                      0: (empty)
                      1: (empty)
                      2: TS_TYPE_PARAMETER_NAME@711..715
                        0: IDENT@711..715 "out" [] [Whitespace(" ")]
                      3: (empty)
                      4: (empty)
                    1: (empty)
                    2: TS_TYPE_PARAMETER@715..716
                      0: (empty)
                      1: (empty)
                      2: TS_TYPE_PARAMETER_NAME@715..716
                        0: IDENT@715..716 "T" [] []
                      3: (empty)
                      4: (empty)
                  2: R_ANGLE@716..717 ">" [] []
                3: JS_PARAMETERS@717..720
                  0: L_PAREN@717..718 "(" [] []
                  1: JS_PARAMETER_LIST@718..718
                  2: R_PAREN@718..720 ")" [] [Whitespace(" ")]
                4: FAT_ARROW@720..723 "=>" [] [Whitespace(" ")]
                5: TS_OBJECT_TYPE@723..725
                  0: L_CURLY@723..724 "{" [] []
                  1: TS_TYPE_MEMBER_LIST@724..724
                  2: R_CURLY@724..725 "}" [] []
            2: (empty)
      1: SEMICOLON@725..726 ";" [] []
    33: JS_VARIABLE_STATEMENT@726..761
      0: JS_VARIABLE_DECLARATION@726..760
        0: LET_KW@726..732 "let" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@732..760
          0: JS_VARIABLE_DECLARATOR@732..760
            0: JS_IDENTIFIER_BINDING@732..733
              0: IDENT@732..733 "x" [] []
            1: TS_TYPE_ANNOTATION@733..760
              0: COLON@733..735 ":" [] [Whitespace(" ")]
              1: TS_BOGUS_TYPE@735..760
                0: NEW_KW@735..739 "new" [] [Whitespace(" ")]
                1: JS_BOGUS@739..752
                  0: L_ANGLE@739..740 "<" [] []
                  1: JS_BOGUS@740..751
                    0: TS_BOGUS_TYPE@740..743
                      0: IN_KW@740..743 "in" [] [Whitespace(" ")]
                    1: TS_TYPE_PARAMETER@743..744
                      0: (empty)
                      1: (empty)
                      2: TS_TYPE_PARAMETER_NAME@743..744
                        0: IDENT@743..744 "T" [] []
                      3: (empty)
                      4: (empty)
                    2: COMMA@744..746 "," [] [Whitespace(" ")]
                    3: TS_TYPE_PARAMETER@746..750
                      0: (empty)
                      1: (empty)
                      2: TS_TYPE_PARAMETER_NAME@746..750
                        0: IDENT@746..750 "out" [] [Whitespace(" ")]
                      3: (empty)
                      4: (empty)
                    4: TS_TYPE_PARAMETER@750..751
                      0: (empty)
                      1: (empty)
                      2: TS_TYPE_PARAMETER_NAME@750..751
                        0: IDENT@750..751 "T" [] []
                      3: (empty)
                      4: (empty)
                  2: R_ANGLE@751..752 ">" [] []
                2: JS_PARAMETERS@752..755
                  0: L_PAREN@752..753 "(" [] []
                  1: JS_PARAMETER_LIST@753..753
                  2: R_PAREN@753..755 ")" [] [Whitespace(" ")]
                3: FAT_ARROW@755..758 "=>" [] [Whitespace(" ")]
                4: TS_OBJECT_TYPE@758..760
                  0: L_CURLY@758..759 "{" [] []
                  1: TS_TYPE_MEMBER_LIST@759..759
                  2: R_CURLY@759..760 "}" [] []
            2: (empty)
      1: SEMICOLON@760..761 ";" [] []
    34: JS_VARIABLE_STATEMENT@761..789
      0: JS_VARIABLE_DECLARATION@761..788
        0: LET_KW@761..767 "let" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@767..788
          0: JS_VARIABLE_DECLARATOR@767..788
            0: JS_IDENTIFIER_BINDING@767..768
              0: IDENT@767..768 "x" [] []
            1: TS_TYPE_ANNOTATION@768..788
              0: COLON@768..770 ":" [] [Whitespace(" ")]
              1: TS_BOGUS_TYPE@770..788
                0: L_CURLY@770..772 "{" [] [Whitespace(" ")]
                1: JS_BOGUS@772..787
                  0: JS_BOGUS@772..787
                    0: JS_LITERAL_MEMBER_NAME@772..773
                      0: IDENT@772..773 "y" [] []
                    1: JS_BOGUS@773..779
                      0: L_ANGLE@773..774 "<" [] []
                      1: JS_BOGUS@774..778
                        0: TS_BOGUS_TYPE@774..777
                          0: IN_KW@774..777 "in" [] [Whitespace(" ")]
                        1: TS_TYPE_PARAMETER@777..778
                          0: (empty)
                          1: (empty)
                          2: TS_TYPE_PARAMETER_NAME@777..778
                            0: IDENT@777..778 "T" [] []
                          3: (empty)
                          4: (empty)
                      2: R_ANGLE@778..779 ">" [] []
                    2: JS_PARAMETERS@779..781
                      0: L_PAREN@779..780 "(" [] []
                      1: JS_PARAMETER_LIST@780..780
                      2: R_PAREN@780..781 ")" [] []
                    3: TS_RETURN_TYPE_ANNOTATION@781..787
                      0: COLON@781..783 ":" [] [Whitespace(" ")]
                      1: TS_ANY_TYPE@783..787
                        0: ANY_KW@783..787 "any" [] [Whitespace(" ")]
                2: R_CURLY@787..788 "}" [] []
            2: (empty)
      1: SEMICOLON@788..789 ";" [] []
    35: JS_VARIABLE_STATEMENT@789..818
      0: JS_VARIABLE_DECLARATION@789..817
        0: LET_KW@789..795 "let" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@795..817
          0: JS_VARIABLE_DECLARATOR@795..817
            0: JS_IDENTIFIER_BINDING@795..796
              0: IDENT@795..796 "x" [] []
            1: TS_TYPE_ANNOTATION@796..817
              0: COLON@796..798 ":" [] [Whitespace(" ")]
              1: TS_OBJECT_TYPE@798..817
                0: L_CURLY@798..800 "{" [] [Whitespace(" ")]
                1: TS_TYPE_MEMBER_LIST@800..816
                  0: TS_METHOD_SIGNATURE_TYPE_MEMBER@800..816
                    0: JS_LITERAL_MEMBER_NAME@800..801
                      0: IDENT@800..801 "y" [] []
                    1: (empty)
                    2: TS_TYPE_PARAMETERS@801..808
                      0: L_ANGLE@801..802 "<" [] []
                      1: TS_TYPE_PARAMETER_LIST@802..807
                        0: TS_TYPE_PARAMETER@802..806
                          0: (empty)
                          1: (empty)
                          2: TS_TYPE_PARAMETER_NAME@802..806
                            0: IDENT@802..806 "out" [] [Whitespace(" ")]
                          3: (empty)
                          4: (empty)
                        1: (empty)
                        2: TS_TYPE_PARAMETER@806..807
                          0: (empty)
                          1: (empty)
                          2: TS_TYPE_PARAMETER_NAME@806..807
                            0: IDENT@806..807 "T" [] []
                          3: (empty)
                          4: (empty)
                      2: R_ANGLE@807..808 ">" [] []
                    3: JS_PARAMETERS@808..810
                      0: L_PAREN@808..809 "(" [] []
                      1: JS_PARAMETER_LIST@809..809
                      2: R_PAREN@809..810 ")" [] []
                    4: TS_RETURN_TYPE_ANNOTATION@810..816
                      0: COLON@810..812 ":" [] [Whitespace(" ")]
                      1: TS_ANY_TYPE@812..816
                        0: ANY_KW@812..816 "any" [] [Whitespace(" ")]
                    5: (empty)
                2: R_CURLY@816..817 "}" [] []
            2: (empty)
      1: SEMICOLON@817..818 ";" [] []
    36: JS_VARIABLE_STATEMENT@818..853
      0: JS_VARIABLE_DECLARATION@818..852
        0: LET_KW@818..824 "let" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@824..852
          0: JS_VARIABLE_DECLARATOR@824..852
            0: JS_IDENTIFIER_BINDING@824..825
              0: IDENT@824..825 "x" [] []
            1: TS_TYPE_ANNOTATION@825..852
              0: COLON@825..827 ":" [] [Whitespace(" ")]
              1: TS_BOGUS_TYPE@827..852
                0: L_CURLY@827..829 "{" [] [Whitespace(" ")]
                1: JS_BOGUS@829..851
                  0: JS_BOGUS@829..851
                    0: JS_LITERAL_MEMBER_NAME@829..830
                      0: IDENT@829..830 "y" [] []
                    1: JS_BOGUS@830..843
                      0: L_ANGLE@830..831 "<" [] []
                      1: JS_BOGUS@831..842
                        0: TS_BOGUS_TYPE@831..834
                          0: IN_KW@831..834 "in" [] [Whitespace(" ")]
                        1: TS_TYPE_PARAMETER@834..835
                          0: (empty)
                          1: (empty)
                          2: TS_TYPE_PARAMETER_NAME@834..835
                            0: IDENT@834..835 "T" [] []
                          3: (empty)
                          4: (empty)
                        2: COMMA@835..837 "," [] [Whitespace(" ")]
                        3: TS_TYPE_PARAMETER@837..841
                          0: (empty)
                          1: (empty)
                          2: TS_TYPE_PARAMETER_NAME@837..841
                            0: IDENT@837..841 "out" [] [Whitespace(" ")]
                          3: (empty)
                          4: (empty)
                        4: TS_TYPE_PARAMETER@841..842
                          0: (empty)
                          1: (empty)
                          2: TS_TYPE_PARAMETER_NAME@841..842
                            0: IDENT@841..842 "T" [] []
                          3: (empty)
                          4: (empty)
                      2: R_ANGLE@842..843 ">" [] []
                    2: JS_PARAMETERS@843..845
                      0: L_PAREN@843..844 "(" [] []
                      1: JS_PARAMETER_LIST@844..844
                      2: R_PAREN@844..845 ")" [] []
                    3: TS_RETURN_TYPE_ANNOTATION@845..851
                      0: COLON@845..847 ":" [] [Whitespace(" ")]
                      1: TS_ANY_TYPE@847..851
                        0: ANY_KW@847..851 "any" [] [Whitespace(" ")]
                2: R_CURLY@851..852 "}" [] []
            2: (empty)
      1: SEMICOLON@852..853 ";" [] []
  3: EOF@853..854 "" [Newline("\n")] []
--
type_parameter_modifier1.ts:1:30 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a type parameter but instead found 'in'
  
  > 1 │ 	export default function foo<in T>() {}
      │ 	                            ^^
    2 │ 	export function foo<out T>() {}
    3 │ 	export function foo1<in T>() {}
  
  i Expected a type parameter here
  
  > 1 │ 	export default function foo<in T>() {}
      │ 	                            ^^
    2 │ 	export function foo<out T>() {}
    3 │ 	export function foo1<in T>() {}
  
--
type_parameter_modifier1.ts:1:33 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
  > 1 │ 	export default function foo<in T>() {}
      │ 	                               ^
    2 │ 	export function foo<out T>() {}
    3 │ 	export function foo1<in T>() {}
  
  i Remove T
  
--
type_parameter_modifier1.ts:2:26 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    1 │ 	export default function foo<in T>() {}
  > 2 │ 	export function foo<out T>() {}
      │ 	                        ^
    3 │ 	export function foo1<in T>() {}
    4 │ 	export function foo2<out T>() {}
  
  i Remove T
  
--
type_parameter_modifier1.ts:3:23 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a type parameter but instead found 'in'
  
    1 │ 	export default function foo<in T>() {}
    2 │ 	export function foo<out T>() {}
  > 3 │ 	export function foo1<in T>() {}
      │ 	                     ^^
    4 │ 	export function foo2<out T>() {}
    5 │ 	let foo: Foo<in T>
  
  i Expected a type parameter here
  
    1 │ 	export default function foo<in T>() {}
    2 │ 	export function foo<out T>() {}
  > 3 │ 	export function foo1<in T>() {}
      │ 	                     ^^
    4 │ 	export function foo2<out T>() {}
    5 │ 	let foo: Foo<in T>
  
--
type_parameter_modifier1.ts:3:26 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    1 │ 	export default function foo<in T>() {}
    2 │ 	export function foo<out T>() {}
  > 3 │ 	export function foo1<in T>() {}
      │ 	                        ^
    4 │ 	export function foo2<out T>() {}
    5 │ 	let foo: Foo<in T>
  
  i Remove T
  
--
type_parameter_modifier1.ts:4:27 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    2 │ 	export function foo<out T>() {}
    3 │ 	export function foo1<in T>() {}
  > 4 │ 	export function foo2<out T>() {}
      │ 	                         ^
    5 │ 	let foo: Foo<in T>
    6 │ 	let foo: Foo<out T>
  
  i Remove T
  
--
type_parameter_modifier1.ts:5:18 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    3 │ 	export function foo1<in T>() {}
    4 │ 	export function foo2<out T>() {}
  > 5 │ 	let foo: Foo<in T>
      │ 	                ^
    6 │ 	let foo: Foo<out T>
    7 │ 	declare function foo<in T>()
  
  i Remove T
  
--
type_parameter_modifier1.ts:6:19 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    4 │ 	export function foo2<out T>() {}
    5 │ 	let foo: Foo<in T>
  > 6 │ 	let foo: Foo<out T>
      │ 	                 ^
    7 │ 	declare function foo<in T>()
    8 │ 	declare function foo<out T>()
  
  i Remove T
  
--
type_parameter_modifier1.ts:7:23 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a type parameter but instead found 'in'
  
    5 │ 	let foo: Foo<in T>
    6 │ 	let foo: Foo<out T>
  > 7 │ 	declare function foo<in T>()
      │ 	                     ^^
    8 │ 	declare function foo<out T>()
    9 │ 	declare let foo: Foo<in T>
  
  i Expected a type parameter here
  
    5 │ 	let foo: Foo<in T>
    6 │ 	let foo: Foo<out T>
  > 7 │ 	declare function foo<in T>()
      │ 	                     ^^
    8 │ 	declare function foo<out T>()
    9 │ 	declare let foo: Foo<in T>
  
--
type_parameter_modifier1.ts:7:26 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    5 │ 	let foo: Foo<in T>
    6 │ 	let foo: Foo<out T>
  > 7 │ 	declare function foo<in T>()
      │ 	                        ^
    8 │ 	declare function foo<out T>()
    9 │ 	declare let foo: Foo<in T>
  
  i Remove T
  
--
type_parameter_modifier1.ts:8:27 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
     6 │ 	let foo: Foo<out T>
     7 │ 	declare function foo<in T>()
   > 8 │ 	declare function foo<out T>()
       │ 	                         ^
     9 │ 	declare let foo: Foo<in T>
    10 │ 	declare let foo: Foo<out T>
  
  i Remove T
  
--
type_parameter_modifier1.ts:9:26 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
     7 │ 	declare function foo<in T>()
     8 │ 	declare function foo<out T>()
   > 9 │ 	declare let foo: Foo<in T>
       │ 	                        ^
    10 │ 	declare let foo: Foo<out T>
    11 │ 	Foo = class <in T> {}
  
  i Remove T
  
--
type_parameter_modifier1.ts:10:27 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
     8 │ 	declare function foo<out T>()
     9 │ 	declare let foo: Foo<in T>
  > 10 │ 	declare let foo: Foo<out T>
       │ 	                         ^
    11 │ 	Foo = class <in T> {}
    12 │ 	Foo = class <out T> {}
  
  i Remove T
  
--
type_parameter_modifier1.ts:13:18 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a type parameter but instead found 'in'
  
    11 │ 	Foo = class <in T> {}
    12 │ 	Foo = class <out T> {}
  > 13 │ 	foo = function <in T>() {}
       │ 	                ^^
    14 │ 	foo = function <out T>() {}
    15 │ 	class Foo { foo<in T>(): T {} }
  
  i Expected a type parameter here
  
    11 │ 	Foo = class <in T> {}
    12 │ 	Foo = class <out T> {}
  > 13 │ 	foo = function <in T>() {}
       │ 	                ^^
    14 │ 	foo = function <out T>() {}
    15 │ 	class Foo { foo<in T>(): T {} }
  
--
type_parameter_modifier1.ts:13:21 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    11 │ 	Foo = class <in T> {}
    12 │ 	Foo = class <out T> {}
  > 13 │ 	foo = function <in T>() {}
       │ 	                   ^
    14 │ 	foo = function <out T>() {}
    15 │ 	class Foo { foo<in T>(): T {} }
  
  i Remove T
  
--
type_parameter_modifier1.ts:14:22 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    12 │ 	Foo = class <out T> {}
    13 │ 	foo = function <in T>() {}
  > 14 │ 	foo = function <out T>() {}
       │ 	                    ^
    15 │ 	class Foo { foo<in T>(): T {} }
    16 │ 	class Foo { foo<out T>(): T {} }
  
  i Remove T
  
--
type_parameter_modifier1.ts:15:18 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a type parameter but instead found 'in'
  
    13 │ 	foo = function <in T>() {}
    14 │ 	foo = function <out T>() {}
  > 15 │ 	class Foo { foo<in T>(): T {} }
       │ 	                ^^
    16 │ 	class Foo { foo<out T>(): T {} }
    17 │ 	foo = { foo<in T>(): T {} };
  
  i Expected a type parameter here
  
    13 │ 	foo = function <in T>() {}
    14 │ 	foo = function <out T>() {}
  > 15 │ 	class Foo { foo<in T>(): T {} }
       │ 	                ^^
    16 │ 	class Foo { foo<out T>(): T {} }
    17 │ 	foo = { foo<in T>(): T {} };
  
--
type_parameter_modifier1.ts:15:21 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    13 │ 	foo = function <in T>() {}
    14 │ 	foo = function <out T>() {}
  > 15 │ 	class Foo { foo<in T>(): T {} }
       │ 	                   ^
    16 │ 	class Foo { foo<out T>(): T {} }
    17 │ 	foo = { foo<in T>(): T {} };
  
  i Remove T
  
--
type_parameter_modifier1.ts:16:22 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    14 │ 	foo = function <out T>() {}
    15 │ 	class Foo { foo<in T>(): T {} }
  > 16 │ 	class Foo { foo<out T>(): T {} }
       │ 	                    ^
    17 │ 	foo = { foo<in T>(): T {} };
    18 │ 	foo = { foo<out T>(): T {} };
  
  i Remove T
  
--
type_parameter_modifier1.ts:17:14 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a type parameter but instead found 'in'
  
    15 │ 	class Foo { foo<in T>(): T {} }
    16 │ 	class Foo { foo<out T>(): T {} }
  > 17 │ 	foo = { foo<in T>(): T {} };
       │ 	            ^^
    18 │ 	foo = { foo<out T>(): T {} };
    19 │ 	<in T>() => {};
  
  i Expected a type parameter here
  
    15 │ 	class Foo { foo<in T>(): T {} }
    16 │ 	class Foo { foo<out T>(): T {} }
  > 17 │ 	foo = { foo<in T>(): T {} };
       │ 	            ^^
    18 │ 	foo = { foo<out T>(): T {} };
    19 │ 	<in T>() => {};
  
--
type_parameter_modifier1.ts:17:17 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    15 │ 	class Foo { foo<in T>(): T {} }
    16 │ 	class Foo { foo<out T>(): T {} }
  > 17 │ 	foo = { foo<in T>(): T {} };
       │ 	               ^
    18 │ 	foo = { foo<out T>(): T {} };
    19 │ 	<in T>() => {};
  
  i Remove T
  
--
type_parameter_modifier1.ts:18:18 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    16 │ 	class Foo { foo<out T>(): T {} }
    17 │ 	foo = { foo<in T>(): T {} };
  > 18 │ 	foo = { foo<out T>(): T {} };
       │ 	                ^
    19 │ 	<in T>() => {};
    20 │ 	<out T>() => {};
  
  i Remove T
  
--
type_parameter_modifier1.ts:19:6 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `>` but instead found `T`
  
    17 │ 	foo = { foo<in T>(): T {} };
    18 │ 	foo = { foo<out T>(): T {} };
  > 19 │ 	<in T>() => {};
       │ 	    ^
    20 │ 	<out T>() => {};
    21 │ 	<in T, out T>() => {};
  
  i Remove T
  
--
type_parameter_modifier1.ts:19:9 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Parenthesized expression didnt contain anything
  
    17 │ 	foo = { foo<in T>(): T {} };
    18 │ 	foo = { foo<out T>(): T {} };
  > 19 │ 	<in T>() => {};
       │ 	       ^
    20 │ 	<out T>() => {};
    21 │ 	<in T, out T>() => {};
  
  i Expected an expression here
  
--
type_parameter_modifier1.ts:19:11 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    17 │ 	foo = { foo<in T>(): T {} };
    18 │ 	foo = { foo<out T>(): T {} };
  > 19 │ 	<in T>() => {};
       │ 	         ^^
    20 │ 	<out T>() => {};
    21 │ 	<in T, out T>() => {};
  
  i An explicit or implicit semicolon is expected here...
  
    17 │ 	foo = { foo<in T>(): T {} };
    18 │ 	foo = { foo<out T>(): T {} };
  > 19 │ 	<in T>() => {};
       │ 	         ^^
    20 │ 	<out T>() => {};
    21 │ 	<in T, out T>() => {};
  
  i ...Which is required to end this statement
  
    17 │ 	foo = { foo<in T>(): T {} };
    18 │ 	foo = { foo<out T>(): T {} };
  > 19 │ 	<in T>() => {};
       │ 	^^^^^^^^^^^
    20 │ 	<out T>() => {};
    21 │ 	<in T, out T>() => {};
  
--
type_parameter_modifier1.ts:20:7 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    18 │ 	foo = { foo<out T>(): T {} };
    19 │ 	<in T>() => {};
  > 20 │ 	<out T>() => {};
       │ 	     ^
    21 │ 	<in T, out T>() => {};
    22 │ 	let x: <in T>() => {};
  
  i Remove T
  
--
type_parameter_modifier1.ts:21:6 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `>` but instead found `T`
  
    19 │ 	<in T>() => {};
    20 │ 	<out T>() => {};
  > 21 │ 	<in T, out T>() => {};
       │ 	    ^
    22 │ 	let x: <in T>() => {};
    23 │ 	let x: <out T>() => {};
  
  i Remove T
  
--
type_parameter_modifier1.ts:21:13 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    19 │ 	<in T>() => {};
    20 │ 	<out T>() => {};
  > 21 │ 	<in T, out T>() => {};
       │ 	           ^
    22 │ 	let x: <in T>() => {};
    23 │ 	let x: <out T>() => {};
  
  i An explicit or implicit semicolon is expected here...
  
    19 │ 	<in T>() => {};
    20 │ 	<out T>() => {};
  > 21 │ 	<in T, out T>() => {};
       │ 	           ^
    22 │ 	let x: <in T>() => {};
    23 │ 	let x: <out T>() => {};
  
  i ...Which is required to end this statement
  
    19 │ 	<in T>() => {};
    20 │ 	<out T>() => {};
  > 21 │ 	<in T, out T>() => {};
       │ 	^^^^^^^^^^^^
    22 │ 	let x: <in T>() => {};
    23 │ 	let x: <out T>() => {};
  
--
type_parameter_modifier1.ts:21:16 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Parenthesized expression didnt contain anything
  
    19 │ 	<in T>() => {};
    20 │ 	<out T>() => {};
  > 21 │ 	<in T, out T>() => {};
       │ 	              ^
    22 │ 	let x: <in T>() => {};
    23 │ 	let x: <out T>() => {};
  
  i Expected an expression here
  
--
type_parameter_modifier1.ts:21:18 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    19 │ 	<in T>() => {};
    20 │ 	<out T>() => {};
  > 21 │ 	<in T, out T>() => {};
       │ 	                ^^
    22 │ 	let x: <in T>() => {};
    23 │ 	let x: <out T>() => {};
  
  i An explicit or implicit semicolon is expected here...
  
    19 │ 	<in T>() => {};
    20 │ 	<out T>() => {};
  > 21 │ 	<in T, out T>() => {};
       │ 	                ^^
    22 │ 	let x: <in T>() => {};
    23 │ 	let x: <out T>() => {};
  
  i ...Which is required to end this statement
  
    19 │ 	<in T>() => {};
    20 │ 	<out T>() => {};
  > 21 │ 	<in T, out T>() => {};
       │ 	           ^^^^^^^
    22 │ 	let x: <in T>() => {};
    23 │ 	let x: <out T>() => {};
  
--
type_parameter_modifier1.ts:22:10 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a type parameter but instead found 'in'
  
    20 │ 	<out T>() => {};
    21 │ 	<in T, out T>() => {};
  > 22 │ 	let x: <in T>() => {};
       │ 	        ^^
    23 │ 	let x: <out T>() => {};
    24 │ 	let x: <in T, out T>() => {};
  
  i Expected a type parameter here
  
    20 │ 	<out T>() => {};
    21 │ 	<in T, out T>() => {};
  > 22 │ 	let x: <in T>() => {};
       │ 	        ^^
    23 │ 	let x: <out T>() => {};
    24 │ 	let x: <in T, out T>() => {};
  
--
type_parameter_modifier1.ts:22:13 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    20 │ 	<out T>() => {};
    21 │ 	<in T, out T>() => {};
  > 22 │ 	let x: <in T>() => {};
       │ 	           ^
    23 │ 	let x: <out T>() => {};
    24 │ 	let x: <in T, out T>() => {};
  
  i Remove T
  
--
type_parameter_modifier1.ts:23:14 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    21 │ 	<in T, out T>() => {};
    22 │ 	let x: <in T>() => {};
  > 23 │ 	let x: <out T>() => {};
       │ 	            ^
    24 │ 	let x: <in T, out T>() => {};
    25 │ 	let x: new <in T>() => {};
  
  i Remove T
  
--
type_parameter_modifier1.ts:24:10 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a type parameter but instead found 'in'
  
    22 │ 	let x: <in T>() => {};
    23 │ 	let x: <out T>() => {};
  > 24 │ 	let x: <in T, out T>() => {};
       │ 	        ^^
    25 │ 	let x: new <in T>() => {};
    26 │ 	let x: new <out T>() => {};
  
  i Expected a type parameter here
  
    22 │ 	let x: <in T>() => {};
    23 │ 	let x: <out T>() => {};
  > 24 │ 	let x: <in T, out T>() => {};
       │ 	        ^^
    25 │ 	let x: new <in T>() => {};
    26 │ 	let x: new <out T>() => {};
  
--
type_parameter_modifier1.ts:24:13 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    22 │ 	let x: <in T>() => {};
    23 │ 	let x: <out T>() => {};
  > 24 │ 	let x: <in T, out T>() => {};
       │ 	           ^
    25 │ 	let x: new <in T>() => {};
    26 │ 	let x: new <out T>() => {};
  
  i Remove T
  
--
type_parameter_modifier1.ts:24:20 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    22 │ 	let x: <in T>() => {};
    23 │ 	let x: <out T>() => {};
  > 24 │ 	let x: <in T, out T>() => {};
       │ 	                  ^
    25 │ 	let x: new <in T>() => {};
    26 │ 	let x: new <out T>() => {};
  
  i Remove T
  
--
type_parameter_modifier1.ts:25:14 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a type parameter but instead found 'in'
  
    23 │ 	let x: <out T>() => {};
    24 │ 	let x: <in T, out T>() => {};
  > 25 │ 	let x: new <in T>() => {};
       │ 	            ^^
    26 │ 	let x: new <out T>() => {};
    27 │ 	let x: new <in T, out T>() => {};
  
  i Expected a type parameter here
  
    23 │ 	let x: <out T>() => {};
    24 │ 	let x: <in T, out T>() => {};
  > 25 │ 	let x: new <in T>() => {};
       │ 	            ^^
    26 │ 	let x: new <out T>() => {};
    27 │ 	let x: new <in T, out T>() => {};
  
--
type_parameter_modifier1.ts:25:17 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    23 │ 	let x: <out T>() => {};
    24 │ 	let x: <in T, out T>() => {};
  > 25 │ 	let x: new <in T>() => {};
       │ 	               ^
    26 │ 	let x: new <out T>() => {};
    27 │ 	let x: new <in T, out T>() => {};
  
  i Remove T
  
--
type_parameter_modifier1.ts:26:18 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    24 │ 	let x: <in T, out T>() => {};
    25 │ 	let x: new <in T>() => {};
  > 26 │ 	let x: new <out T>() => {};
       │ 	                ^
    27 │ 	let x: new <in T, out T>() => {};
    28 │ 	let x: { y<in T>(): any };
  
  i Remove T
  
--
type_parameter_modifier1.ts:27:14 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a type parameter but instead found 'in'
  
    25 │ 	let x: new <in T>() => {};
    26 │ 	let x: new <out T>() => {};
  > 27 │ 	let x: new <in T, out T>() => {};
       │ 	            ^^
    28 │ 	let x: { y<in T>(): any };
    29 │ 	let x: { y<out T>(): any };
  
  i Expected a type parameter here
  
    25 │ 	let x: new <in T>() => {};
    26 │ 	let x: new <out T>() => {};
  > 27 │ 	let x: new <in T, out T>() => {};
       │ 	            ^^
    28 │ 	let x: { y<in T>(): any };
    29 │ 	let x: { y<out T>(): any };
  
--
type_parameter_modifier1.ts:27:17 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    25 │ 	let x: new <in T>() => {};
    26 │ 	let x: new <out T>() => {};
  > 27 │ 	let x: new <in T, out T>() => {};
       │ 	               ^
    28 │ 	let x: { y<in T>(): any };
    29 │ 	let x: { y<out T>(): any };
  
  i Remove T
  
--
type_parameter_modifier1.ts:27:24 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    25 │ 	let x: new <in T>() => {};
    26 │ 	let x: new <out T>() => {};
  > 27 │ 	let x: new <in T, out T>() => {};
       │ 	                      ^
    28 │ 	let x: { y<in T>(): any };
    29 │ 	let x: { y<out T>(): any };
  
  i Remove T
  
--
type_parameter_modifier1.ts:28:13 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a type parameter but instead found 'in'
  
    26 │ 	let x: new <out T>() => {};
    27 │ 	let x: new <in T, out T>() => {};
  > 28 │ 	let x: { y<in T>(): any };
       │ 	           ^^
    29 │ 	let x: { y<out T>(): any };
    30 │ 	let x: { y<in T, out T>(): any };
  
  i Expected a type parameter here
  
    26 │ 	let x: new <out T>() => {};
    27 │ 	let x: new <in T, out T>() => {};
  > 28 │ 	let x: { y<in T>(): any };
       │ 	           ^^
    29 │ 	let x: { y<out T>(): any };
    30 │ 	let x: { y<in T, out T>(): any };
  
--
type_parameter_modifier1.ts:28:16 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    26 │ 	let x: new <out T>() => {};
    27 │ 	let x: new <in T, out T>() => {};
  > 28 │ 	let x: { y<in T>(): any };
       │ 	              ^
    29 │ 	let x: { y<out T>(): any };
    30 │ 	let x: { y<in T, out T>(): any };
  
  i Remove T
  
--
type_parameter_modifier1.ts:29:17 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    27 │ 	let x: new <in T, out T>() => {};
    28 │ 	let x: { y<in T>(): any };
  > 29 │ 	let x: { y<out T>(): any };
       │ 	               ^
    30 │ 	let x: { y<in T, out T>(): any };
    31 │ 
  
  i Remove T
  
--
type_parameter_modifier1.ts:30:13 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a type parameter but instead found 'in'
  
    28 │ 	let x: { y<in T>(): any };
    29 │ 	let x: { y<out T>(): any };
  > 30 │ 	let x: { y<in T, out T>(): any };
       │ 	           ^^
    31 │ 
  
  i Expected a type parameter here
  
    28 │ 	let x: { y<in T>(): any };
    29 │ 	let x: { y<out T>(): any };
  > 30 │ 	let x: { y<in T, out T>(): any };
       │ 	           ^^
    31 │ 
  
--
type_parameter_modifier1.ts:30:16 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    28 │ 	let x: { y<in T>(): any };
    29 │ 	let x: { y<out T>(): any };
  > 30 │ 	let x: { y<in T, out T>(): any };
       │ 	              ^
    31 │ 
  
  i Remove T
  
--
type_parameter_modifier1.ts:30:23 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    28 │ 	let x: { y<in T>(): any };
    29 │ 	let x: { y<out T>(): any };
  > 30 │ 	let x: { y<in T, out T>(): any };
       │ 	                     ^
    31 │ 
  
  i Remove T
  
--
	export default function foo<in T>() {}
	export function foo<out T>() {}
	export function foo1<in T>() {}
	export function foo2<out T>() {}
	let foo: Foo<in T>
	let foo: Foo<out T>
	declare function foo<in T>()
	declare function foo<out T>()
	declare let foo: Foo<in T>
	declare let foo: Foo<out T>
	Foo = class <in T> {}
	Foo = class <out T> {}
	foo = function <in T>() {}
	foo = function <out T>() {}
	class Foo { foo<in T>(): T {} }
	class Foo { foo<out T>(): T {} }
	foo = { foo<in T>(): T {} };
	foo = { foo<out T>(): T {} };
	<in T>() => {};
	<out T>() => {};
	<in T, out T>() => {};
	let x: <in T>() => {};
	let x: <out T>() => {};
	let x: <in T, out T>() => {};
	let x: new <in T>() => {};
	let x: new <out T>() => {};
	let x: new <in T, out T>() => {};
	let x: { y<in T>(): any };
	let x: { y<out T>(): any };
	let x: { y<in T, out T>(): any };
